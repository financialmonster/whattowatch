{"version":3,"sources":["domains/auth/authConstants.ts","domains/auth/authReducer.ts","domains/promo/promoConstants.ts","domains/promo/promoReducer.ts","domains/films/filmsConstants.ts","domains/films/filmsReducer.ts","domains/reviews/reviewsConstants.ts","domains/reviews/reviewsReducer.ts","domains/favorites/favoritesConstants.ts","domains/favorites/favoritesReducer.ts","mainConstants.ts","init/rootReducer.ts","domains/promo/promoActions.ts","api.ts","domains/promo/saga/workerFetchPromo.ts","domains/promo/saga/promoWatchers.ts","domains/films/filmsActions.ts","domains/films/saga/workerFetchFilms.ts","domains/films/saga/filmsWatchers.ts","domains/auth/authActions.ts","domains/auth/saga/workerFetchAuth.ts","domains/auth/saga/workerFetchAuthStatus.ts","domains/auth/saga/authWatchers.ts","domains/reviews/reviewsActions.ts","domains/reviews/saga/workerFetchReviews.ts","domains/reviews/saga/workerFetchReview.ts","domains/reviews/saga/reviewsWatchers.ts","domains/favorites/favoritesActions.ts","domains/favorites/saga/workerFetchFavorites.ts","domains/favorites/saga/workerFetchFavorite.ts","domains/favorites/saga/favoritesWatchers.ts","init/rootSaga.ts","init/store.ts","hooks/useVideoPlayerProgress.ts","domains/auth/authSelectors.ts","domains/promo/promoSelectors.ts","hooks/useLogoLinkClick.ts","components/logo/Logo.tsx","hooks/useFilmsPagePush.ts","components/header/Header.tsx","hooks/useSignInLinkClick.ts","utils.ts","components/spinner/Spinner.tsx","components/videoPlayer/VideoPlayer.tsx","hooks/useActiveVideoPlayer.ts","hooks/usePlayingVideo.ts","domains/favorites/favoritesSelectors.ts","domains/films/filmsSelectors.ts","hooks/useFetchFavorite.ts","components/notification/Notification.tsx","components/filmButtons/FilmButtons.tsx","components/promo/Promo.tsx","components/message/Message.tsx","components/promoContainer/PromoContainer.tsx","hooks/useFetchPromo.ts","hooks/useFetchFilms.ts","components/film/Film.tsx","components/filmsList/FilmsList.tsx","components/filmsListContainer/FilmsListContainer.tsx","hooks/useFilmsListBatch.ts","components/genreFilter/GenreFilter.tsx","hooks/useGenreFilter.ts","components/footer/Footer.tsx","pages/mainPage/MainPage.tsx","formShapes.ts","components/loginForm/LoginForm.tsx","components/loginFormContainer/LoginFormContainer.tsx","hooks/useFetchAuth.ts","pages/loginPage/LoginPage.tsx","components/overviewTab/OverviewTab.tsx","components/detailsTab/DetailsTab.tsx","domains/reviews/reviewsSelectors.ts","components/review/Review.tsx","components/reviewsTab/ReviewsTab.tsx","hooks/useFetchReviews.ts","components/detailedFilm/DetailedFilm.tsx","hooks/useSetFilm.ts","components/similarFilms/SimilarFilms.tsx","pages/filmPage/FilmPage.tsx","components/radioBtn/RadioBtn.tsx","components/reviewForm/ReviewForm.tsx","components/reviewFormContainer/ReviewFormContainer.tsx","hooks/useFetchReview.ts","pages/reviewPage/ReviewPage.tsx","components/favoritesFilmsContainer/FavoritesFilmsContainer.tsx","hooks/useFetchFavorites.ts","pages/favoritesPage/FavoritesPage.tsx","components/app/App.tsx","hooks/useFetchAuthStatus.ts","components/errorBoundary/ErrorBoundary.tsx","index.tsx"],"names":["AuthActionTypes","PromoActionTypes","initialStateImmutable","Map","user","authError","isAuthFetching","authStatusError","isAuthStatusFetching","authReducer","state","action","type","FETCH_AUTH_REQUEST","set","FETCH_AUTH_SUCCESS","payload","FETCH_AUTH_FAIL","FETCH_AUTH_STATUS_REQUEST","FETCH_AUTH_STATUS_SUCCESS","FETCH_AUTH_STATUS_FAIL","AUTH_STATUS_UNAUTHORIZED","RESET_AUTH_ERROR","FilmsActionTypes","initialState","promo","isPromoFetching","promoError","promoReducer","FETCH_PROMO_REQUEST","FETCH_PROMO_SUCCESS","fromJS","FETCH_PROMO_FAIL","ReviewsActionTypes","films","List","isFilmsFetching","filmsError","filter","film","filmsReducer","FETCH_FILMS_REQUEST","FETCH_FILMS_SUCCESS","FETCH_FILMS_FAIL","SET_FILTER","SET_FILM","FavoritesActionTypes","reviews","id","data","isReviewsFetching","reviewsError","isReviewFetching","reviewError","reviewsReducer","FETCH_REVIEWS_REQUEST","FETCH_REVIEWS_SUCCESS","FETCH_REVIEWS_FAIL","FETCH_REVIEW_REQUEST","FETCH_REVIEW_SUCCESS","FETCH_REVIEW_FAIL","RESET_REVIEW_ERROR","Routes","HttpStatusCodes","favorites","isFavoritesFetching","favoritesError","isFavoriteFetching","favoriteError","favoritesReducer","FETCH_FAVORITES_REQUEST","FETCH_FAVORITES_SUCCESS","adaptedFavorites","Array","isArray","FETCH_FAVORITES_FAIL","FETCH_FAVORITE_REQUEST","FETCH_FAVORITE_SUCCESS","FETCH_FAVORITE_FAIL","RESET_FAVORITE_ERROR","persistConfig","transforms","immutableTransform","key","storage","history","createBrowserHistory","routerReducer","connectRouter","rootReducer","combineReducers","router","auth","persistedRootReducer","persistReducer","promoActions","error","BASE_URL","api","fetchPromo","fetch","fetchFilms","fetchAuth","userData","method","headers","body","JSON","stringify","credentials","fetchAuthStatus","fetchReviews","fetchReview","reviewData","rating","comment","fetchFavorites","fetchFavorite","status","workFetchPromo","call","response","SUCCESS_STATUS_CODE","Error","json","put","watchFetchPromo","watchPromo","takeLatest","all","filmsActions","workFetchFilms","watchFetchFilms","watchFilms","authActions","workFetchAuth","workFetchAuthStatus","UNAUTHORIZED_STATUS_CODE","watchFetchAuth","watchFetchAuthStatus","watchAuth","reviewsActions","workFetchReviews","workFetchReview","push","process","watchFetchReviews","watchFetchReview","watchReviews","favoritesActions","workFetchFavorites","workFetchFavorite","watchFetchFavorites","watchFetchFavorite","watchFavorites","rootSaga","routerMiddleware","createRouterMiddleware","sagaMiddleware","createSagaMiddleware","middlewares","createLogger","duration","collapsed","colors","title","prevState","nextState","store","createStore","composeWithDevTools","applyMiddleware","persistedStore","persistStore","run","interval","getUser","get","getAuthError","getIsAuthFetching","getAuthStatusError","getIsAuthStatusFetching","getIsPromoFetching","getPromoError","getPromo","useLogoLinkClick","isMain","useLocation","pathname","MAIN_PAGE","dispatch","useDispatch","useCallback","Logo","isMainPage","logoLinkClickHandler","isFooter","logoLinkStyle","cursor","logoLinkClass","cn","className","onClick","style","useFilmsPagePush","Header","backgroundImage","name","posterImage","useSelector","authSelectors","promoSelectors","avatar","isFilmPage","includes","isReviewPage","isFavoritesPage","FAVORITES_PAGE","isLoginPage","LOGIN_PAGE","signInLinkClickHandler","useSignInLinkClick","navLinkClickHandler","avatarImgClickHandler","userBlockJSX","message","avatarImgStyle","src","height","alt","width","headerClass","getTimeFromMins","mins","h","m","moment","utc","hours","minutes","seconds","format","isRefInitialized","ref","current","isFilms","size","rotation","keyframes","SpinnerWrapper","styled","div","Petal","rotate","delay","transformDegs","animationDelays","Spinner","Children","toArray","fill","map","_","idx","VideoPlayer","memo","forwardRef","props","handleExitBtnClick","runTime","isPlaying","isVideoLoading","onCanPlayThroughHandler","progress","useState","setProgress","useEffect","setInterval","currentTime","clearInterval","isFinite","useVideoPlayerProgress","isActive","setIsActive","playPauseBtnHandler","pause","play","exitBtnClickHandler","useActiveVideoPlayer","playerStyle","display","restTimeFormatted","useMemo","onCanPlayThrough","poster","value","max","left","viewBox","xlinkHref","requestFullscreen","usePlayingVideo","setIsPlaying","setIsVideoLoading","videoRef","useRef","playBtnClickHandler","document","overflow","getIsFavoritesFetching","getFavoritesError","getFavorites","getIsFavoriteFetching","getFavoriteError","getIsFilmsFetching","getFilmsError","getFilms","selectGenres","createSelector","genres","toSet","slice","sort","Set","concat","getFilter","getFilm","selectFilmsByGenre","useFetchFavorite","favorite","favoriteId","filmsSelectors","promoInFilms","find","isFavorite","favoritesSelectors","myListBtnClickHandler","fadeInOut","NotificationWrapper","Notification","children","FilmButtons","detailed","useParams","addReviewBtnClickHandler","isPromo","Promo","MessageWrapper","Message","PromoContainer","useFetchPromo","verifiedPromo","useFetchFilms","Film","filmDivClickHandler","FilmsList","filmsJSX","FilmsListContainer","batchedFilms","hasMoreFilms","batch","setBatch","requestNextBatch","useFilmsListBatch","filteredFilms","showMoreBtnClickHandler","GenreFilter","genresJSX","genreItemClickHander","genre","useGenreFilter","isGenres","isCurrentGenre","genreClass","genreLinkStyle","Footer","MainPage","divStyle","backgroundColor","loginFormShape","initialValues","email","password","schema","object","shape","string","min","required","trim","reviewFormShape","LoginForm","loginFormSubmitHandler","onSubmit","validationSchema","isValid","placeholder","htmlFor","disabled","LoginFormContainer","useFetchAuth","LoginPage","to","OverviewTab","scoresCount","description","director","starring","Math","floor","mapRatingToMark","join","DetailsTab","released","getIsReviewsFetching","getReviewsError","getReviews","getIn","getReviewsId","getIsReviewFetching","getReviewError","Review","number","review","date","Date","parse","year","getFullYear","month","getMonth","day","getDate","dateTime","ReviewsTab","reviewsJSX","leftColReviewsJSX","rightColReviewsJSX","reviewsSelectors","reviewsId","useFetchReviews","isReviews","a","b","ind","DetailedFilm","currentTab","setCurrentTab","window","scrollTo","currentFilm","useSetFilm","tab","navLinksJSX","isCurrentTab","navItemClass","navLinkStyle","toFixed","SimilarFilms","similarFilms","el","selectSimilarFilmsFactory","FilmPage","sectionStyle","RadioBtn","groupValue","field","onChange","onBlur","checked","ReviewForm","reviewFormSubmitHandler","values","component","as","ReviewFormContainer","userReview","useFetchReview","verifiedIsReviewFetching","handleReviewFormSubmit","ReviewPage","FavoritesFilmsContainer","favoritesList","useFetchFavorites","FavoritesPage","App","useFetchAuthStatus","path","exact","FILM_PAGE","REVIEW_PAGE","ErrorBoundary","isError","this","React","PureComponent","ReactDOM","render","persistor","loading","querySelector"],"mappings":"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","file":"static/js/main.33d621f4.chunk.js","sourcesContent":["export enum AuthActionTypes {\n    FETCH_AUTH_REQUEST = `FETCH_AUTH_REQUEST`,\n    FETCH_AUTH_SUCCESS = `FETCH_AUTH_SUCCESS`,\n    FETCH_AUTH_FAIL = `FETCH_AUTH_FAIL`,\n    FETCH_AUTH_STATUS_REQUEST = `FETCH_AUTH_STATUS_REQUEST`,\n    FETCH_AUTH_STATUS_SUCCESS = `FETCH_AUTH_STATUS_SUCCESS`,\n    FETCH_AUTH_STATUS_FAIL = `FETCH_AUTH_STATUS_FAIL`,\n    AUTH_STATUS_UNAUTHORIZED = `AUTH_STATUS_UNAUTHORIZED`,\n    RESET_AUTH_ERROR = `RESET_AUTH_ERROR`\n}\n","import { Map } from 'immutable';\n\nimport { TAuthState, TAuthActions } from './authTypes';\nimport { AuthActionTypes } from './authConstants';\n\nconst initialState: TAuthState = {\n    user: null,\n    authError: null,\n    isAuthFetching: false,\n    authStatusError: null,\n    isAuthStatusFetching: false\n}\n\nconst initialStateImmutable = Map(initialState);\n\nconst authReducer = (state = initialStateImmutable, action: TAuthActions): typeof initialStateImmutable => {\n    switch (action.type) {\n        case AuthActionTypes.FETCH_AUTH_REQUEST:\n            return state.set(`authError`, null)\n                        .set(`isAuthFetching`, true);\n\n        case AuthActionTypes.FETCH_AUTH_SUCCESS:\n            return state.set(`user`, Map(action.payload))\n                        .set(`isAuthFetching`, false); \n                \n        case AuthActionTypes.FETCH_AUTH_FAIL:\n            return state.set(`user`, null)\n                        .set(`isAuthFetching`, false)\n                        .set(`authError`, action.payload);\n\n        case AuthActionTypes.FETCH_AUTH_STATUS_REQUEST:\n            return state.set(`authStatusError`, null)\n                        .set(`isAuthStatusFetching`, true);\n\n        case AuthActionTypes.FETCH_AUTH_STATUS_SUCCESS:\n            return state.set(`user`, Map(action.payload))\n                        .set(`isAuthStatusFetching`, false);\n\n        case AuthActionTypes.FETCH_AUTH_STATUS_FAIL:\n            return state.set(`user`, null)\n                        .set(`isAuthStatusFetching`, false)\n                        .set(`authStatusError`, action.payload);\n\n        case AuthActionTypes.AUTH_STATUS_UNAUTHORIZED:\n            return state.set(`user`, null)\n                        .set(`isAuthStatusFetching`, false);\n\n        case AuthActionTypes.RESET_AUTH_ERROR:\n            return state.set(`authError`, null);\n\n        default:\n            // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n            const x: never = action;\n    }\n\n    return state;\n}\n\nexport default authReducer;\n","export enum PromoActionTypes {\n    FETCH_PROMO_REQUEST = `FETCH_PROMO_REQUEST`,\n    FETCH_PROMO_SUCCESS = `FETCH_PROMO_SUCCESS`,\n    FETCH_PROMO_FAIL = `FETCH_PROMO_FAIL`\n}\n","import { Map, fromJS } from 'immutable';\n\nimport { TPromoState, TPromoActions } from './promoTypes';\nimport { PromoActionTypes } from './promoConstants';\n\nconst initialState: TPromoState = {\n    promo: Map(),\n    isPromoFetching: true,\n    promoError: null\n}\n\nconst initialStateImmutable = Map(initialState);\n\nconst promoReducer = (state = initialStateImmutable, action: TPromoActions): typeof initialStateImmutable => {\n    switch(action.type) {\n        case PromoActionTypes.FETCH_PROMO_REQUEST:\n            return state.set(`promoError`, null)\n                        .set(`isPromoFetching`, true);\n\n        case PromoActionTypes.FETCH_PROMO_SUCCESS:\n            return state.set(`promo`, fromJS(action.payload))\n                        .set(`isPromoFetching`, false);\n\n        case PromoActionTypes.FETCH_PROMO_FAIL:\n            return state.set(`promo`, Map())\n                        .set(`isPromoFetching`, false)\n                        .set(`promoError`, action.payload);\n\n        default:\n            // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n            const x: never = action;\n    }\n\n    return state;\n}\n\nexport default promoReducer;\n","export enum FilmsActionTypes {\n    FETCH_FILMS_REQUEST = `FETCH_FILMS_REQUEST`,\n    FETCH_FILMS_SUCCESS = `FETCH_FILMS_SUCCESS`,\n    FETCH_FILMS_FAIL = `FETCH_FILMS_FAIL`,\n    SET_FILTER = `SET_FILTER`,\n    SET_FILM = `SET_FILM`\n}\n","import { List, fromJS, Map } from 'immutable';\n\nimport { TFilmsState, TFilmsActions } from './filmsTypes';\nimport { FilmsActionTypes } from './filmsConstants';\n\nconst initialState: TFilmsState = {\n    films: List(),\n    isFilmsFetching: true,\n    filmsError: null,\n    filter: `All genres`,\n    film: null\n}\n\nconst initialStateImmutable = Map(initialState);\n\nconst filmsReducer = (state = initialStateImmutable, action: TFilmsActions): typeof initialStateImmutable => {\n    switch (action.type) {\n        case FilmsActionTypes.FETCH_FILMS_REQUEST:\n            return state.set(`filmsError`, null)\n                        .set(`isFilmsFetching`, true);\n\n        case FilmsActionTypes.FETCH_FILMS_SUCCESS:\n            return state.set(`films`, fromJS(action.payload))\n                        .set(`isFilmsFetching`, false);\n\n        case FilmsActionTypes.FETCH_FILMS_FAIL:\n            return state.set(`films`, List())\n                        .set(`isFilmsFetching`, false)\n                        .set(`filmsError`, action.payload);\n\n        case FilmsActionTypes.SET_FILTER:\n            return state.set(`filter`, action.payload);\n\n        case FilmsActionTypes.SET_FILM:\n            return state.set(`film`, action.payload);\n\n        default:\n            // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n            const x: never = action;\n    }\n\n    return state;\n}\n\nexport default filmsReducer;\n","export enum ReviewsActionTypes {\n    FETCH_REVIEWS_REQUEST = `FETCH_REVIEWS_REQUEST`,\n    FETCH_REVIEWS_SUCCESS = `FETCH_REVIEWS_SUCCESS`,\n    FETCH_REVIEWS_FAIL = `FETCH_REVIEWS_FAIL`,\n    FETCH_REVIEW_REQUEST = `FETCH_REVIEW_REQUEST`,\n    FETCH_REVIEW_SUCCESS = `FETCH_REVIEW_SUCCESS`,\n    FETCH_REVIEW_FAIL = `FETCH_REVIEW_FAIL`,\n    RESET_REVIEW_ERROR = `RESET_REVIEW_ERROR`\n}\n","import { List, fromJS, Map } from 'immutable';\n\nimport { TReviewsState, TReviewsActions } from './reviewsTypes';\nimport { ReviewsActionTypes } from './reviewsConstants';\n\nconst initialState: TReviewsState = {\n    reviews: fromJS({ id: null, data: List()}),\n    isReviewsFetching: true, \n    reviewsError: null,\n    isReviewFetching: false,\n    reviewError: null\n}\n\nconst initialStateImmutable = Map(initialState);\n\nconst reviewsReducer = (state = initialStateImmutable, action: TReviewsActions): typeof initialStateImmutable => {\n    switch (action.type) {\n        case ReviewsActionTypes.FETCH_REVIEWS_REQUEST:\n            return state.set(`reviewsError`, null)\n                        .set(`isReviewsFetching`, true);\n\n        case ReviewsActionTypes.FETCH_REVIEWS_SUCCESS:\n            return state.set(`reviews`, fromJS(action.payload))\n                        .set(`isReviewsFetching`, false);\n\n        case ReviewsActionTypes.FETCH_REVIEWS_FAIL:\n            return state.set(`reviews`, fromJS({id: null, data: List()}))\n                        .set(`isReviewsFetching`, false)\n                        .set(`reviewsError`, action.payload);\n\n        case ReviewsActionTypes.FETCH_REVIEW_REQUEST:\n            return state.set(`reviewError`, null)\n                        .set(`isReviewFetching`, true);\n\n        case ReviewsActionTypes.FETCH_REVIEW_SUCCESS:\n            return state.set(`reviews`, fromJS(action.payload))\n                        .set(`isReviewFetching`, false)\n                        .set(`isReviewsFetching`, false);\n\n        case ReviewsActionTypes.FETCH_REVIEW_FAIL:\n            return state.set(`isReviewFetching`, false)\n                        .set(`isReviewsFetching`, false)\n                        .set(`reviewError`, action.payload);\n\n        case ReviewsActionTypes.RESET_REVIEW_ERROR:\n            return state.set(`reviewError`, null);\n\n        default:\n            // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n            const x: never = action;\n    }\n\n    return state;\n}\n\nexport default reviewsReducer;\n","export enum FavoritesActionTypes {\n    FETCH_FAVORITES_REQUEST = `FETCH_FAVORITES_REQUEST`,\n    FETCH_FAVORITES_SUCCESS = `FETCH_FAVORITES_SUCCESS`,\n    FETCH_FAVORITES_FAIL = `FETCH_FAVORITES_FAIL`,\n    FETCH_FAVORITE_REQUEST = `FETCH_FAVORITE_REQUEST`,\n    FETCH_FAVORITE_SUCCESS = `FETCH_FAVORITE_SUCCESS`,\n    FETCH_FAVORITE_FAIL = `FETCH_FAVORITE_FAIL`,\n    RESET_FAVORITE_ERROR = `RESET_FAVORITE_ERROR`\n}\n","import { List, fromJS, Map } from 'immutable';\n\nimport { TFavoritesState, TFavoritesActions } from './favoritesTypes';\nimport { FavoritesActionTypes } from './favoritesConstants';\n\nconst initialState: TFavoritesState = {\n    favorites: List(),\n    isFavoritesFetching: true,\n    favoritesError: null,\n    isFavoriteFetching: false,\n    favoriteError: null\n}\n\nconst initialStateImmutable = Map(initialState);\n\nconst favoritesReducer = (state = initialStateImmutable, action: TFavoritesActions): typeof initialStateImmutable => {\n    switch (action.type) {\n        case FavoritesActionTypes.FETCH_FAVORITES_REQUEST:\n            return state.set(`favoritesError`, null)\n                        .set(`isFavoritesFetching`, true);\n\n        case FavoritesActionTypes.FETCH_FAVORITES_SUCCESS:\n            const adaptedFavorites = (Array.isArray(action.payload)) ? action.payload : [ action.payload ];\n\n            return state.set(`favorites`, fromJS(adaptedFavorites))\n                        .set(`isFavoritesFetching`, false);\n\n        case FavoritesActionTypes.FETCH_FAVORITES_FAIL:\n            return state.set(`favorites`, List())\n                        .set(`isFavoritesFetching`, false)\n                        .set(`favoritesError`, action.payload);\n\n        case FavoritesActionTypes.FETCH_FAVORITE_REQUEST:\n            return state.set(`favoriteError`, null)\n                        .set(`isFavoriteFetching`, true);\n\n        case FavoritesActionTypes.FETCH_FAVORITE_SUCCESS:\n            return state.set(`isFavoriteFetching`, false);\n\n        case FavoritesActionTypes.FETCH_FAVORITE_FAIL:\n            return state.set(`isFavoriteFetching`, false)\n                        .set(`favoriteError`, action.payload);\n\n        case FavoritesActionTypes.RESET_FAVORITE_ERROR:\n            return state.set(`favoriteError`, null);\n\n        default:\n            // eslint-disable-next-line no-case-declarations,@typescript-eslint/no-unused-vars\n            const x: never = action;\n    }\n\n    return state;\n}\n\nexport default favoritesReducer;\n","export enum Routes {\n    MAIN_PAGE = '/',\n    LOGIN_PAGE = '/login',\n    FILM_PAGE = '/film/:id',\n    REVIEW_PAGE = '/film/:id/review',\n    FAVORITES_PAGE = '/mylist'\n}\n\nexport enum HttpStatusCodes {\n    SUCCESS_STATUS_CODE = 200,\n    NOT_FOUND_STATUS_CODE = 404,\n    UNAUTHORIZED_STATUS_CODE = 401\n}; \n","import { connectRouter } from 'connected-react-router/immutable';\nimport { combineReducers } from 'redux';\nimport { createBrowserHistory } from 'history';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport immutableTransform from 'redux-persist-transform-immutable';\n\nimport authReducer from 'domains/auth/authReducer';\nimport promoReducer from 'domains/promo/promoReducer';\nimport filmsReducer from 'domains/films/filmsReducer';\nimport reviewsReducer from 'domains/reviews/reviewsReducer';\nimport favoritesReducer from 'domains/favorites/favoritesReducer';\n\nconst persistConfig = {\n    transforms: [immutableTransform()],\n    key: `root`,\n    storage\n}\n\nexport const history = createBrowserHistory();\nconst routerReducer = connectRouter(history);\n\nconst rootReducer = combineReducers({\n    router: routerReducer,\n    auth: authReducer,\n    promo: promoReducer,\n    films: filmsReducer,\n    reviews: reviewsReducer,\n    favorites: favoritesReducer\n});\n\nexport const persistedRootReducer = persistReducer(persistConfig, rootReducer);\n","import { PromoActionTypes } from './promoConstants';\nimport { TPromoActions } from './promoTypes';\nimport { TFilm } from 'types';\n\nexport const promoActions = {\n    fetchPromoRequest: (): TPromoActions => ({ type: PromoActionTypes.FETCH_PROMO_REQUEST }),\n\n    fetchPromoSuccess: (promo: TFilm): TPromoActions =>({\n        type: PromoActionTypes.FETCH_PROMO_SUCCESS,\n        payload: promo\n    }),\n    \n    fetchPromoFail: (error: Error): TPromoActions => ({\n        type: PromoActionTypes.FETCH_PROMO_FAIL,\n        error: true,\n        payload: error\n    })\n}\n","import { TUserData, TUserReview }  from 'types';\n\nconst BASE_URL = `https://htmlacademy-react-3.appspot.com/wtw`;\n\nconst api = {\n    promo: {\n        fetchPromo: () => fetch(`${BASE_URL}/films/promo`)\n    },\n    films: {\n        fetchFilms: () => fetch(`${BASE_URL}/films`)\n    },\n    auth: {\n        fetchAuth: (userData: TUserData) => fetch(`${BASE_URL}/login`, {\n            method: `POST`,\n\t\t\theaders: {\n                'Content-Type': `application/json`\n\t\t\t},\n            body: JSON.stringify(userData),\n            credentials:`include`\n        }),\n        fetchAuthStatus: () => fetch(`${BASE_URL}/login`, {\n            method: `GET`,\n\t\t\theaders: {\n                'Content-Type': `application/json`\n\t\t\t},\n            credentials:`include`\n        })\n    },\n    reviews: {\n        fetchReviews: (id: number) => fetch(`${BASE_URL}/comments/${id}`),\n        fetchReview: (id: number, reviewData: TUserReview) => fetch(`${BASE_URL}/comments/${id}`, {\n            method: `POST`,\n            headers: {\n                'Content-Type': `application/json`\n            },\n            body: JSON.stringify({\n                rating: reviewData.rating,\n                comment: reviewData[\"review-text\"]\n            }),\n            credentials:`include`\n        })\n    },\n    favorites: {\n        fetchFavorites: () => fetch(`${BASE_URL}/favorite`, {\n            method: `GET`,\n            headers: {\n                'Content-Type': `application/json`\n            },\n            credentials: `include`\n        }),\n        fetchFavorite: (id: number, status: number) => fetch(`${BASE_URL}/favorite/${id}/${status}`, {\n            method: `POST`,\n            credentials: `include`\n        })\n    }\n}\n\nexport default api;\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { promoActions } from 'domains/promo/promoActions';\nimport api from 'api';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TFilm } from 'types';\n\nexport function* workFetchPromo(): SagaIterator {\n    try {\n        const response: Response = yield call(api.promo.fetchPromo);\n\n        if(response.status !== HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            throw new Error(`We are sorry. Promo film can't be loaded now. Please, reload the page.`)\n        }\n\n        const film: TFilm = yield call([response, response.json]);\n\n        yield put(promoActions.fetchPromoSuccess(film));\n    } catch(err) {\n        yield put(promoActions.fetchPromoFail(err));\n    }\n}\n","import { takeLatest, all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { PromoActionTypes } from 'domains/promo/promoConstants';\nimport { workFetchPromo } from './workerFetchPromo';\n\nfunction* watchFetchPromo(): SagaIterator {\n    yield takeLatest(PromoActionTypes.FETCH_PROMO_REQUEST, workFetchPromo);\n}\n\nexport function* watchPromo(): SagaIterator {\n    yield all([call( watchFetchPromo )]);\n}\n","import { Map } from 'immutable';\n\nimport { FilmsActionTypes }  from './filmsConstants';\nimport { TFilmsActions } from './filmsTypes';\nimport { TFilms } from 'types';\n\nexport const filmsActions = {\n    fetchFilmsRequest: (): TFilmsActions => ({ type: FilmsActionTypes.FETCH_FILMS_REQUEST }),\n\n    fetchFilmsSuccess: (films: TFilms): TFilmsActions => ({\n        type: FilmsActionTypes.FETCH_FILMS_SUCCESS,\n        payload: films\n    }),\n\n    fetchFilmsFail: (error: Error): TFilmsActions => ({\n        type: FilmsActionTypes.FETCH_FILMS_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    setFilter: (filter: string): TFilmsActions => ({\n        type: FilmsActionTypes.SET_FILTER,\n        payload: filter\n    }),\n\n    setFilm: (film: Map<string, any>): TFilmsActions => ({\n        type: FilmsActionTypes.SET_FILM,\n        payload: film\n    })\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { filmsActions } from 'domains/films/filmsActions';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TFilms } from 'types';\n\nexport function* workFetchFilms(): SagaIterator {\n    try {\n        const response: Response = yield call(api.films.fetchFilms);\n\n        if(response.status !== HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            throw new Error(`We are sorry. List of films can't be loaded now. Please, reload the page.`);\n        }\n\n        const films: TFilms = yield call([response, response.json]);\n\n        yield put(filmsActions.fetchFilmsSuccess(films));\n    } catch(err) {\n        yield put(filmsActions.fetchFilmsFail(err));\n    }\n}\n","import { takeLatest, all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { FilmsActionTypes } from 'domains/films/filmsConstants';\nimport { workFetchFilms } from './workerFetchFilms';\n\nfunction* watchFetchFilms(): SagaIterator {\n    yield takeLatest(FilmsActionTypes.FETCH_FILMS_REQUEST, workFetchFilms);\n}\n\nexport function* watchFilms(): SagaIterator {\n    yield all([call( watchFetchFilms )]);\n}\n","import { AuthActionTypes }  from './authConstants';\nimport { TAuthActions } from './authTypes';\nimport { TUserData, TUser } from 'types';\n\nexport const authActions = {\n    fetchAuthRequest: (userData: TUserData): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_REQUEST,\n        payload: userData\n    }),\n\n    fetchAuthSuccess: (user: TUser): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_SUCCESS,\n        payload: user\n    }),\n\n    fetchAuthFail: (error: Error): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    fetchAuthStatusRequest: (): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_STATUS_REQUEST\n    }),\n\n    fetchAuthStatusSuccess: (user: TUser): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_STATUS_SUCCESS,\n        payload: user\n    }),\n\n    fetchAuthStatusFail: (error: Error): TAuthActions => ({\n        type: AuthActionTypes.FETCH_AUTH_STATUS_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    authStatusAnauthorized: (): TAuthActions => ({\n        type: AuthActionTypes.AUTH_STATUS_UNAUTHORIZED\n    }),\n\n    resetAuthError: (): TAuthActions => ({\n        type: AuthActionTypes.RESET_AUTH_ERROR\n    }),\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { authActions } from 'domains/auth/authActions';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TFetchAuthRequest } from 'domains/auth/authTypes';\nimport { TUser } from 'types';\n\nexport function* workFetchAuth(action: TFetchAuthRequest): SagaIterator {\n    try {\n        const response: Response = yield call(api.auth.fetchAuth, action.payload);\n\n        if(response.status !== HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            throw new Error(`We are sorry. You can't be signed in now. Please, reload the page and retry.`);\n        }\n\n        const user: TUser = yield call([response, response.json]);\n\n        yield put(authActions.fetchAuthSuccess(user));\n    } catch(err) {\n        yield put(authActions.fetchAuthFail(err));\n    }\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { authActions } from 'domains/auth/authActions';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TUser } from 'types';\n\nexport function* workFetchAuthStatus(): SagaIterator {\n    try {\n        const response: Response = yield call(api.auth.fetchAuthStatus);\n\n        if(response.status === HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            const user: TUser = yield call([response, response.json]);\n\n            yield put(authActions.fetchAuthStatusSuccess(user));\n        } else if (response.status === HttpStatusCodes.UNAUTHORIZED_STATUS_CODE) {\n            yield put(authActions.authStatusAnauthorized());\n        } else {\n            throw new Error(`Authorization failed. Please, reload the page.`);\n        }\n    } catch (err) {\n        yield put(authActions.fetchAuthStatusFail(err));\n    }\n}\n","import { takeLatest, all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { AuthActionTypes } from 'domains/auth/authConstants';\nimport { workFetchAuth } from './workerFetchAuth';\nimport { workFetchAuthStatus } from './workerFetchAuthStatus';\n\nfunction* watchFetchAuth(): SagaIterator {\n    yield takeLatest(AuthActionTypes.FETCH_AUTH_REQUEST, workFetchAuth);\n}\n\nfunction* watchFetchAuthStatus(): SagaIterator {\n    yield takeLatest(AuthActionTypes.FETCH_AUTH_STATUS_REQUEST, workFetchAuthStatus);\n}\n\nexport function* watchAuth(): SagaIterator {\n    yield all([call(watchFetchAuth), call(watchFetchAuthStatus )]);\n}\n","import { ReviewsActionTypes } from './reviewsConstants';\nimport { TReviewsActions } from './reviewsTypes';\nimport { TReviews, TUserReview } from 'types';\n\nexport const reviewsActions = {\n    fetchReviewsRequest: (id: number): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEWS_REQUEST,\n        payload: id\n    }),\n\n    fetchReviewsSuccess: (id: number, reviews: TReviews): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEWS_SUCCESS,\n        payload: {\n            id,\n            data: reviews\n        }\n    }),\n\n    fetchReviewsFail: (error: Error): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEWS_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    fetchReviewRequest: (id: number, reviewData: TUserReview): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEW_REQUEST,\n        payload: {\n            id,\n            reviewData\n        }\n    }),\n\n    fetchReviewSuccess: (id: number, reviews: TReviews): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEW_SUCCESS,\n        payload: {\n            id,\n            data: reviews\n        }\n    }),\n\n    fetchReviewFail: (error: Error): TReviewsActions => ({\n        type: ReviewsActionTypes.FETCH_REVIEW_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    resetReviewError: (): TReviewsActions => ({\n        type: ReviewsActionTypes.RESET_REVIEW_ERROR\n    })\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { reviewsActions } from 'domains/reviews/reviewsActions';\nimport { TFetchReviewsRequest } from 'domains/reviews/reviewsTypes';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TReviews } from 'types';\n\nexport function* workFetchReviews(action: TFetchReviewsRequest): SagaIterator {\n    try {\n        const response: Response = yield call(api.reviews.fetchReviews, action.payload);\n\n        if(response.status !== HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            throw new Error(`We are sorry. List of reviews can't be loaded now. Please, reload the page.`);\n        }\n\n        const reviews: TReviews = yield call([response, response.json]);\n\n        yield put(reviewsActions.fetchReviewsSuccess(action.payload, reviews));\n    } catch (err) {\n        yield put(reviewsActions.fetchReviewsFail(err));\n    }\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\nimport { push } from 'connected-react-router/immutable';\n\nimport api from 'api';\nimport { reviewsActions } from 'domains/reviews/reviewsActions';\nimport { TFetchReviewRequest } from 'domains/reviews/reviewsTypes';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TReviews } from 'types';\n\nexport function* workFetchReview(action: TFetchReviewRequest): SagaIterator {\n    try {\n        const { payload: {id, reviewData}} = action;\n        const response: Response = yield call(api.reviews.fetchReview, id, reviewData);\n\n        if(response.status === HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            const reviews: TReviews = yield call([response, response.json]);\n\n            yield put(reviewsActions.fetchReviewSuccess(id, reviews));\n            yield put(push(`${process.env.PUBLIC_URL}/film/${id}`));\n        } else if (response.status === HttpStatusCodes.UNAUTHORIZED_STATUS_CODE) {\n            throw new Error(`You're unauthorized. Please, sign in and retry.`);\n        } else {\n            throw new Error(`Can't save your review. Please, reload the page and retry.`);\n        } \n    } catch (err) {\n        yield put(reviewsActions.fetchReviewFail(err));\n    }\n}\n","import { takeLatest, all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { ReviewsActionTypes } from 'domains/reviews/reviewsConstants';\nimport { workFetchReviews } from './workerFetchReviews';\nimport { workFetchReview } from './workerFetchReview';\n\nfunction* watchFetchReviews(): SagaIterator {\n    yield takeLatest(ReviewsActionTypes.FETCH_REVIEWS_REQUEST, workFetchReviews);\n}\n\nfunction* watchFetchReview(): SagaIterator {\n    yield takeLatest(ReviewsActionTypes.FETCH_REVIEW_REQUEST, workFetchReview);\n}\n\nexport function* watchReviews(): SagaIterator {\n    yield all([call( watchFetchReviews ), call( watchFetchReview )]);\n}\n","import { FavoritesActionTypes } from './favoritesConstants';\nimport { TFavoritesActions } from './favoritesTypes';\nimport { TFilms } from 'types';\n\nexport const favoritesActions = {\n    fetchFavoritesRequest: (): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITES_REQUEST\n    }),\n\n    fetchFavoritesSuccess: (favorites: TFilms): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITES_SUCCESS,\n        payload: favorites\n    }),\n\n    fetchFavoritesFail: (error: Error): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITES_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    fetchFavoriteRequest: (id: number, status: number): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITE_REQUEST,\n        payload: {\n            id,\n            status\n        }\n    }),\n\n    fetchFavoriteSuccess: (favorites: TFilms): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITE_SUCCESS,\n        payload: favorites\n    }),\n\n    fetchFavoriteFail: (error: Error): TFavoritesActions => ({\n        type: FavoritesActionTypes.FETCH_FAVORITE_FAIL,\n        error: true,\n        payload: error\n    }),\n\n    resetFavoriteError: (): TFavoritesActions => ({\n        type: FavoritesActionTypes.RESET_FAVORITE_ERROR\n    })\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { favoritesActions } from 'domains/favorites/favoritesActions';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TFilms } from 'types';\n\nexport function* workFetchFavorites(): SagaIterator {\n    try {\n        const response: Response = yield call(api.favorites.fetchFavorites);\n\n        if(response.status !== HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            throw new Error(`We are sorry. List of films can't be loaded now. Please, reload the page.`);\n        }\n\n        const favorites: TFilms = yield call([response, response.json]);\n\n        yield put(favoritesActions.fetchFavoritesSuccess(favorites));\n    } catch (err) {\n        yield put(favoritesActions.fetchFavoritesFail(err));\n    }\n}\n","import { put, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport api from 'api';\nimport { favoritesActions } from 'domains/favorites/favoritesActions';\nimport { TFetchFavoriteRequest } from 'domains/favorites/favoritesTypes';\nimport { HttpStatusCodes } from 'mainConstants';\nimport { TFilms } from 'types';\n\nexport function* workFetchFavorite(action: TFetchFavoriteRequest): SagaIterator {\n    try {\n        const { payload: {id, status}} = action;\n        const response: Response = yield call(api.favorites.fetchFavorite, id, status);\n\n        if(response.status === HttpStatusCodes.SUCCESS_STATUS_CODE) {\n            const favorites: TFilms = yield call([response, response.json]);\n\n            yield put(favoritesActions.fetchFavoriteSuccess(favorites));\n            yield put(favoritesActions.fetchFavoritesRequest());\n        } else if (response.status === HttpStatusCodes.UNAUTHORIZED_STATUS_CODE) {\n            throw new Error(`You're unauthorized. Please, sign in and retry.`);\n        } else {\n            throw new Error(`We are sorry. The film can't be marked as favorite. Please, reload the page and retry.`);\n        }     \n    } catch(err) {\n        yield put(favoritesActions.fetchFavoriteFail(err));\n    }\n}\n","import { takeLatest, all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { FavoritesActionTypes } from 'domains/favorites/favoritesConstants';\nimport { workFetchFavorites } from './workerFetchFavorites';\nimport { workFetchFavorite } from './workerFetchFavorite';\n\nfunction* watchFetchFavorites(): SagaIterator {\n    yield takeLatest(FavoritesActionTypes.FETCH_FAVORITES_REQUEST, workFetchFavorites);\n}\n\nfunction* watchFetchFavorite(): SagaIterator {\n    yield takeLatest(FavoritesActionTypes.FETCH_FAVORITE_REQUEST, workFetchFavorite);\n}\n\nexport function* watchFavorites(): SagaIterator {\n    yield all([call( watchFetchFavorites ), call( watchFetchFavorite )]);\n}\n","import { all, call } from 'redux-saga/effects';\nimport { SagaIterator } from '@redux-saga/core';\n\nimport { watchPromo } from 'domains/promo/saga/promoWatchers';\nimport { watchFilms } from 'domains/films/saga/filmsWatchers';\nimport { watchAuth } from 'domains/auth/saga/authWatchers';\nimport { watchReviews } from 'domains/reviews/saga/reviewsWatchers';\nimport { watchFavorites } from 'domains/favorites/saga/favoritesWatchers';\n\nexport function* rootSaga(): SagaIterator {\n    yield all([call( watchPromo ), call( watchFilms ), call( watchAuth ), call( watchReviews ),\n        call( watchFavorites )\n    ]);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension/developmentOnly';\nimport { routerMiddleware as createRouterMiddleware } from 'connected-react-router/immutable';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore } from 'redux-persist';\n\nimport { persistedRootReducer, history } from './rootReducer';\nimport { rootSaga } from './rootSaga'; \n\nconst routerMiddleware = createRouterMiddleware(history);\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewares = [sagaMiddleware, routerMiddleware];\n\nconst logger = createLogger({\n    duration: true,\n    collapsed: true,\n    colors: {\n        title: (action) => (action.error) ? `firebrick` : `deepskyblue`,\n        prevState: () => `#1C5FAF`,\n        action:    () => `#149945`,\n        nextState: () => `#A47104`,\n        error:     () => `#ff0005`\n    }\n});\n\nif(process.env.NODE_ENV !== `production`) {\n    middlewares.push(logger);\n}\n\nconst store = createStore(persistedRootReducer, composeWithDevTools(applyMiddleware(...middlewares)));\nconst persistedStore = persistStore(store);\n\nsagaMiddleware.run(rootSaga);\n\nexport { persistedStore, store };\n","import { useEffect, useState } from 'react';\n\nimport { isRefInitialized } from 'utils';\n\nlet interval: number;\n\nexport const useVideoPlayerProgress = (ref: unknown) => {\n    const [progress, setProgress] = useState(0);\n\n    useEffect(() => {\n        if(isRefInitialized(ref) && ref) {\n            interval = setInterval(() => {\n                setProgress(ref.current.currentTime / ref.current.duration * 100);\n            }, 1000);\n        }\n\n        return () => clearInterval(interval);\n    }, [ref]);\n    \n    return isFinite(progress)\n        ? progress\n        : 0;\n}\n","import { TState } from 'types';\n\nexport const getUser = (state: TState) => state.auth.get(`user`);\n\nexport const getAuthError = (state: TState) => state.auth.get(`authError`);\n\nexport const getIsAuthFetching = (state: TState) => state.auth.get(`isAuthFetching`);\n\nexport const getAuthStatusError = (state: TState) => state.auth.get(`authStatusError`);\n\nexport const getIsAuthStatusFetching = (state: TState) => state.auth.get(`isAuthStatusFetching`);\n","import { TState } from 'types';\n\nexport const getIsPromoFetching = (state: TState) => state.promo.get(`isPromoFetching`);\n\nexport const getPromoError = (state: TState) => state.promo.get(`promoError`);\n\nexport const getPromo = (state: TState) => state.promo.get(`promo`);\n","import { useCallback } from 'react';\nimport { push } from 'connected-react-router/immutable';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { Routes } from 'mainConstants';\n\nexport const useLogoLinkClick = () => {\n    const {pathname} = useLocation();\n\n    const isMain = pathname === `${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`;\n    const dispatch = useDispatch();\n\n    const logoLinkClickHandler = useCallback((): void => {\n        if(!isMain) {\n            dispatch(push(`${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`));\n        }\n    }, [isMain, dispatch]);\n\n    return logoLinkClickHandler;\n}\n","import React, { FC } from 'react';\nimport cn from 'classnames';\n\ntype TLogoProps = {\n    isMainPage: boolean;\n    logoLinkClickHandler: () => void;\n    isFooter?: boolean;\n}\n\nexport const Logo: FC<TLogoProps> = ({isMainPage, logoLinkClickHandler, isFooter}) => {\n    const logoLinkStyle = (isMainPage)\n        ? {}\n        : {cursor: `pointer`};\n\n    const logoLinkClass = cn(`logo__link`, {\n        'logo__link--light': isFooter\n    });\n\n    return (\n        <div className=\"logo\">\n            <a className={logoLinkClass} onClick={logoLinkClickHandler} style={logoLinkStyle}\n                title={(isMainPage) ? `` : `To the main page`}\n            >\n                <span className=\"logo__letter logo__letter--1\">W</span>\n                <span className=\"logo__letter logo__letter--2\">T</span>\n                <span className=\"logo__letter logo__letter--3\">W</span>\n            </a>\n        </div>\n    );\n}\n","import { useCallback } from 'react';\nimport { push } from 'connected-react-router/immutable';\nimport { useDispatch } from 'react-redux';\n\nexport const useFilmsPagePush = (id?: number) => {\n    const dispatch = useDispatch();\n\n    const pushToFilmPage = useCallback(() => {\n        dispatch(push(`${process.env.PUBLIC_URL}/film/${id}`));\n    }, [dispatch, id]);\n\n    return pushToFilmPage;\n}\n","import React, { FC, ReactElement, useCallback } from 'react';\nimport cn from 'classnames';\nimport { Map } from 'immutable';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { push } from 'connected-react-router/immutable';\n\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport * as promoSelectors from 'domains/promo/promoSelectors';\nimport { useLogoLinkClick } from 'hooks/useLogoLinkClick';\nimport { useSignInLinkClick } from 'hooks/useSignInLinkClick';\nimport { Routes } from 'mainConstants';\nimport { Logo } from 'components/logo/Logo';\nimport { useFilmsPagePush } from 'hooks/useFilmsPagePush';\n\ntype THeaderProps = {\n    film?: Map<string, any>;\n}\n\nexport const Header: FC<THeaderProps> = ({film}) => {\n    const user = useSelector(authSelectors.getUser);\n    const promo = useSelector(promoSelectors.getPromo);\n    const authStatusError = useSelector(authSelectors.getAuthStatusError);\n    const isAuthStatusFetching = useSelector(authSelectors.getIsAuthStatusFetching);\n\n    let backgroundImage: string;\n    let name: string;\n    let posterImage: string | undefined;\n    let id: number | undefined;\n\n    const dispatch = useDispatch();\n    \n    if(film) {\n        backgroundImage = (film as Map<string, any>).get(`background_image`);\n        name = (film as Map<string, any>).get(`name`);\n        posterImage = (film as Map<string, any>).get(`poster_image`);\n        id = (film as Map<string, any>).get(`id`);\n    } else {\n        backgroundImage = (promo as Map<string, any>).get(`background_image`);\n        name = (promo as Map<string, any>).get(`name`);\n    }\n\n    const {pathname} = useLocation();\n    const isFilmPage = pathname.includes(`film`) && !pathname.includes(`review`);\n    const isMainPage = pathname === `${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`;\n    const isReviewPage = pathname.includes(`review`);\n    const isFavoritesPage = pathname === `${process.env.PUBLIC_URL}${Routes.FAVORITES_PAGE}`;\n\n    const logoLinkClickHandler = useLogoLinkClick();\n    const {signInLinkClickHandler, isLoginPage} = useSignInLinkClick();\n    const navLinkClickHandler = useFilmsPagePush(id);\n\n    const avatarImgClickHandler = useCallback(() => {\n        if(!isFavoritesPage) {\n            dispatch(push(`${process.env.PUBLIC_URL}${Routes.FAVORITES_PAGE}`));\n        }\n    }, [dispatch, isFavoritesPage]);\n\n    let avatar: string;\n    let userBlockJSX: ReactElement = (\n        <div className=\"user-block\">\n            <a className=\"user-block__link\" onClick={signInLinkClickHandler} title=\"To the login page\">\n                Sign in\n            </a>\n        </div>\n    );\n\n    if(isAuthStatusFetching) {\n        userBlockJSX = <div className=\"user-block\">Authorization...</div>;\n    } else if(authStatusError) {\n        userBlockJSX = (\n            <div className=\"user-block\">\n                {(authStatusError as Error).message}\n            </div>\n        );\n    } else if(user) {\n        avatar = (user as Map<string,any>).get(`avatar_url`);\n\n        const avatarImgStyle = (isFavoritesPage)\n            ? {cursor: `default`}\n            : {};\n\n        userBlockJSX = (\n            <div className=\"user-block\">\n                <div className=\"user-block__avatar\">\n                    <img src={`https://htmlacademy-react-3.appspot.com/${avatar}`} onClick={avatarImgClickHandler}\n                        height=\"63\" alt=\"User avatar\" width=\"63\"\n                        title={(isFavoritesPage) ? `` : `To the favorites page`} style={avatarImgStyle}            \n                    />\n                </div>\n            </div>\n        );\n    }\n    \n    const headerClass = cn(`page-header`, {\n        'user-page__head': isLoginPage || isFavoritesPage,\n        'movie-card__head': isFilmPage\n    });\n\n    return (\n        <>\n            {(!isLoginPage && !isFavoritesPage) &&\n                <div className=\"movie-card__bg\">\n                    <img src={backgroundImage} alt={name} />\n                </div>\n            }\n            <h1 className=\"visually-hidden\">WTW</h1>\n            <header className={headerClass}>\n                <Logo isMainPage={isMainPage} logoLinkClickHandler={logoLinkClickHandler} />\n                {(isReviewPage) &&\n                    <nav className=\"breadcrumbs\">\n                        <ul className=\"breadcrumbs__list\">\n                            <li className=\"breadcrumbs__item\">\n                                <a className=\"breadcrumbs__link breadcrumbs__link--active\" onClick={navLinkClickHandler}\n                                    title=\"To the film page\"\n                                >\n                                    {name}\n                                </a>\n                            </li>\n                            <li className=\"breadcrumbs__item\">\n                                <a className=\"breadcrumbs__link\">Add review</a>\n                            </li>\n                        </ul>\n                    </nav>\n                }\n                {(isLoginPage || isFavoritesPage) &&\n                    <h1 className=\"page-title  user-page__title\">{(isLoginPage) ? `Sign in` : `My list`}</h1>\n                }\n                {(!isLoginPage) && userBlockJSX}\n            </header>\n            {(isReviewPage) &&\n                <div className=\"movie-card__poster movie-card__poster--small\">\n                    <img src={posterImage} alt={name} width=\"218\" height=\"327\" />\n                </div>\n            }\n        </>\n    );\n}\n","import { useCallback } from 'react';\nimport { push } from 'connected-react-router/immutable';\nimport { useDispatch } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport { Routes } from 'mainConstants';\n\nexport const useSignInLinkClick = () => {\n    const {pathname} = useLocation();\n\n    const isLoginPage = pathname === `${process.env.PUBLIC_URL}${Routes.LOGIN_PAGE}`;\n    const dispatch = useDispatch();\n\n    const signInLinkClickHandler = useCallback((): void => {\n        if (!isLoginPage) {\n            dispatch(push(`${process.env.PUBLIC_URL}${Routes.LOGIN_PAGE}`));\n        }\n    }, [isLoginPage, dispatch]);\n\n    return {\n        signInLinkClickHandler,\n        isLoginPage\n    };\n}\n","import { MutableRefObject } from 'react';\nimport moment from 'moment';\nimport { List, Map, Set } from 'immutable';\n\nexport const getTimeFromMins = (mins: number | undefined): string => {\n    const h = (mins) ? mins / 60 | 0 : 0;\n    const m = (mins) ? mins % 60 | 0 : 0;\n\n    return moment.utc().hours(h).minutes(m).seconds(0).format(\"h:mm:ss\");\n}\n\nexport const isRefInitialized = (ref: unknown): ref is MutableRefObject<HTMLVideoElement> => {\n    return (ref as MutableRefObject<HTMLVideoElement>).current !== null;\n}\n\nexport const isFilms = (films: unknown): films is List<Map<string, any>> => {\n    return (films as List<Map<string, any>>).size !== 0;\n}\n\nexport const isPromo = (promo: unknown): promo is Map<string, any> => {\n    return (promo as Map<string, any>).size !== 0;\n}\n\nexport const isReviews = (reviews: unknown): reviews is List<Map<string, any>> => {\n    return (reviews as List<Map<string, any>>).size !== 0;\n}\n\nexport const isGenres = (genres: Set<any> | undefined): genres is Set<string> => {\n    return genres !== void 0;\n}\n\nexport const mapMonthToNubmer = (number: number) => {\n    const MONTHS: string[] = [`January`, `February`, `March`, `April`, `May`, `June`, `July`, `August`, `September`,\n        `October`, `November`, `December`];\n\n    return MONTHS[number];\n}\n\nexport const mapRatingToMark = (rating: number): string => {\n    switch(Math.floor(rating)) {\n        case 10:\n            return `Awesome`;\n\n        case 9:\n        case 8:\n            return `Very good`;\n\n        case 7:\n        case 6:\n        case 5:\n            return `Good`;\n\n        case 4:\n        case 3:\n            return `Normal`;\n\n        case 2:\n        case 1:\n        case 0:\n            return `Bad`;\n    }\n\n    return `User's mark`;\n}\n","import React, { FC, Children } from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\n\r\ntype TPetalProps = {\r\n    rotate: string;\r\n    delay: string;\r\n};\r\n\r\nconst rotation = keyframes`\r\n    0% {\r\n        opacity: 1\r\n    }\r\n\r\n    100% {\r\n        opacity: 0\r\n    }\r\n`;\r\n\r\nconst SpinnerWrapper = styled.div`\r\n    width: 327px;\r\n    height: 327px;\r\n    display: block;\r\n    overflow: hidden;\r\n    background: transparent;\r\n    margin: 0 auto;\r\n    position: relative;\r\n    transform: translateZ(0) scale(1);\r\n    backface-visibility: hidden;\r\n    transform-origin: 0 0;\r\n`;\r\n\r\nconst Petal = styled.div<TPetalProps>`\r\n    left: 153px;\r\n    top: 78px;\r\n    position: absolute;\r\n    animation: ${rotation} linear 1s infinite;\r\n    background: #831a19;\r\n    width: 19px;\r\n    height: 39px;\r\n    border-radius: 9px / 19px;\r\n    transform-origin: 9px 85px;\r\n    box-sizing: content-box;\r\n    transform: ${({rotate}) => rotate};\r\n    animation-delay: ${({delay}) => delay};\r\n`;\r\n\r\nconst transformDegs: number[] = [0, 30, 60, 90, 120, 150, 180, 210, 240, 270, 300, 330];\r\nconst animationDelays: number[] = [-0.9166666666666666, -0.8333333333333334, -0.75, -0.6666666666666666,\r\n    -0.583333333333333, -0.5, -0.4166666666666667, -0.3333333333333333, -0.25, -0.16666666666666666,\r\n    -0.08333333333333333, 0\r\n];\r\n\r\nexport const Spinner: FC = () => (\r\n    <SpinnerWrapper>   \r\n        {\r\n            Children.toArray(new Array(12).fill(``).map((_, idx) => (\r\n                <Petal rotate={`rotate(${transformDegs[idx]}deg)`}\r\n                    delay={`${animationDelays[idx]}s`}\r\n                />\r\n            )))\r\n        }\r\n    </SpinnerWrapper>\r\n);\r\n","import React, { FC, memo, forwardRef, useMemo } from 'react';\n\nimport { getTimeFromMins, isRefInitialized } from 'utils';\nimport { useVideoPlayerProgress } from 'hooks/useVideoPlayerProgress';\nimport { useActiveVideoPlayer } from 'hooks/useActiveVideoPlayer';\nimport { Spinner } from 'components/spinner/Spinner';\n\ntype TVideoPlayerProps = {\n    src: string | undefined;\n    posterImage: string | undefined;\n    runTime: number | undefined;\n    ref: React.RefObject<HTMLVideoElement>;\n    isPlaying: boolean;\n    handleExitBtnClick: () => void;\n    isVideoLoading: boolean;\n    onCanPlayThroughHandler: () => void;\n}\n\nexport const VideoPlayer: FC<TVideoPlayerProps> = memo(forwardRef((props, ref) => {\n    const { handleExitBtnClick, src, posterImage, runTime, isPlaying, isVideoLoading,\n        onCanPlayThroughHandler} = props;\n\n    const progress = useVideoPlayerProgress(ref);\n    const {isActive, playPauseBtnHandler, exitBtnClickHandler} =\n        useActiveVideoPlayer(isPlaying, ref, handleExitBtnClick);\n\n    const playerStyle = (isPlaying)\n        ? {}\n        : {display: `none`};\n\n    const fullScreenBtnClickHandler = () => {\n        if(isRefInitialized(ref)) {\n            ref.current.requestFullscreen();\n        }\n    }    \n\n    const restTimeFormatted = useMemo(() => {\n        const restTime = (runTime as number) * (100 - progress);\n\n        return getTimeFromMins(restTime);\n    }, [runTime, progress]);\n\n    if(isVideoLoading) {\n        return (\n            <div className=\"player\" style={playerStyle}>\n                <Spinner />\n                <video className=\"player__video\" src={src} ref={ref} onCanPlayThrough={onCanPlayThroughHandler} />\n            </div>\n        );\n    }\n\n    return (     \n        <div className=\"player\" style={playerStyle}>\n            <video className=\"player__video\" src={src} poster={posterImage} ref={ref} />\n            <button type=\"button\" className=\"player__exit\" onClick={exitBtnClickHandler} title=\"Exit\">\n                Exit\n            </button>\n            <div className=\"player__controls\">\n                <div className=\"player__controls-row\">\n                    <div className=\"player__time\">\n                        <progress className=\"player__progress\" value={progress} max=\"100\" />\n                        <div className=\"player__toggler\" style={{ left: `${progress}%` }}>\n                            Toggler\n                        </div>\n                    </div>\n                    <div className=\"player__time-value\">{restTimeFormatted}</div>\n                </div>\n                <div className=\"player__controls-row\">\n                    <button type=\"button\" className=\"player__play\" onClick={playPauseBtnHandler}\n                        title={(isActive) ? `Pause` : `Play`}\n                    >\n                        <svg viewBox={(isActive) ? `0 0 14 21` : `0 0 320.001 320.001`} width=\"14\" height=\"21\">\n                            <use xlinkHref={(isActive) ? `#pause` : \"#play\"}></use>\n                        </svg>\n                        <span>{(isActive) ? `Pause` : `Play`}</span>\n                    </button>\n                    <div className=\"player__name\">Transpotting</div>\n                    <button type=\"button\" className=\"player__full-screen\" onClick={fullScreenBtnClickHandler}\n                        title=\"Full screen\"\n                    >\n                        <svg viewBox=\"0 0 27 27\" width=\"27\" height=\"27\">\n                            <use xlinkHref=\"#full-screen\"></use>\n                        </svg>\n                        <span>Full screen</span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}));\n","import { useState, useCallback, useEffect } from 'react';\n\nimport { isRefInitialized } from 'utils';\n\nexport const useActiveVideoPlayer = (isPlaying: boolean, ref: unknown, handleExitBtnClick: () => void) => {\n    const [isActive, setIsActive] = useState(false);\n\n    useEffect(() => {\n        setIsActive(isPlaying);\n    }, [isPlaying]);\n\n    const playPauseBtnHandler = useCallback(() => {\n        if(isRefInitialized(ref)) {\n            if(isActive) {\n                ref.current.pause();\n            } else {\n                ref.current.play();\n            }\n        }\n\n        setIsActive((isActive) => !isActive);\n    }, [isActive, ref]);\n\n    const exitBtnClickHandler = useCallback(() => {\n        if(isRefInitialized(ref)) {\n            handleExitBtnClick();\n            ref.current.currentTime = 0;\n            \n            if(isActive) {\n                ref.current.pause();\n            }\n        }\n    }, [handleExitBtnClick, ref, isActive]);\n\n    return {\n        isActive,\n        playPauseBtnHandler,\n        exitBtnClickHandler\n    };\n} \n","import { useState, useCallback, useRef } from 'react';\n\nexport const usePlayingVideo = () => {\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isVideoLoading, setIsVideoLoading] = useState(true);\n\n    const videoRef = useRef<HTMLVideoElement>(null);\n\n    const playBtnClickHandler = useCallback(() => {\n        if(videoRef && videoRef.current) {\n            videoRef.current.play();\n            setIsPlaying(true);\n            document.body.style.overflow = `hidden`;       \n        }\n    }, []);\n\n    const handleExitBtnClick = useCallback(() => {\n        setIsPlaying(false);\n        document.body.style.overflow = `visible`; \n    }, []);\n\n    const onCanPlayThroughHandler = useCallback(() => {\n        setIsVideoLoading(false);        \n    }, []);\n\n    return {\n        videoRef,\n        isPlaying,\n        handleExitBtnClick,\n        playBtnClickHandler,\n        isVideoLoading,\n        onCanPlayThroughHandler\n    };\n}\n","import { createSelector } from 'reselect';\n\nimport { isFilms } from 'utils';\nimport { TState } from 'types';\n\nexport const getIsFavoritesFetching = (state: TState) => state.favorites.get(`isFavoritesFetching`);\n\nexport const getFavoritesError = (state: TState) => state.favorites.get(`favoritesError`);\n\nexport const getFavorites = (state: TState) => state.favorites.get(`favorites`);\n\nexport const getIsFavoriteFetching = (state: TState) => state.favorites.get(`isFavoriteFetching`);\n\nexport const getFavoriteError = (state: TState) => state.favorites.get(`favoriteError`);\n\nexport const selectIsFavoriteFactory = (favoriteId: number) => createSelector( getFavorites, (favorites) => {\n    if(isFilms(favorites)) {        \n        return favorites.find((favorite) => favorite.get(`id`) === favoriteId);\n    }\n    \n    return false;\n});\n","import { createSelector } from 'reselect';\nimport { Map, Set } from 'immutable';\n\nimport { TState } from 'types';\nimport { isFilms } from 'utils';\n\nexport const getIsFilmsFetching = (state: TState) => state.films.get(`isFilmsFetching`);\n\nexport const getFilmsError = (state: TState) => state.films.get(`filmsError`);\n\nexport const getFilms = (state: TState) => state.films.get(`films`);\n\nexport const selectGenres = createSelector(getFilms, (films) => {    \n    if(isFilms(films)) {\n        const genres = films.map((film) => film.get(`genre`))\n                            .toSet()\n                            .slice(0, 9)\n                            .sort();\n\n        return Set([`All genres`]).concat(genres);\n    }\n});\n\nexport const getFilter = (state: TState) => state.films.get(`filter`);\n\nexport const getFilm = (state: TState) => state.films.get(`film`);\n\nexport const selectFilmsByGenre = createSelector(getFilms, getFilter, (films, filter) => {\n    if(isFilms(films)) {\n        return (filter === `All genres`)\n            ? films\n            : films.filter((film) => film.get(`genre`) === filter);\n    }\n});\n\nexport const selectSimilarFilmsFactory = (film: Map<string, any>) => createSelector(getFilms, (films) => {\n    if(isFilms(films)) {\n        return films.filter((el) => el.get(`genre`) === film.get(`genre`) && el !== film)\n                    .slice(0, 4);\n    }\n});\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nimport { favoritesActions } from 'domains/favorites/favoritesActions';\nimport * as favoritesSelectors from 'domains/favorites/favoritesSelectors';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\nimport { isFilms } from 'utils';\n\nexport const useFetchFavorite = (favorite: number | Map<string, any>) => {\n    const dispatch = useDispatch();\n    const films = useSelector(filmsSelectors.getFilms);\n    let favoriteId: number | undefined;\n\n    if(typeof favorite === `number`) {\n        favoriteId = favorite;\n    } else if(isFilms(films)) {      \n        const promoInFilms = films.find((film) => film.get(`name`) === favorite.get(`name`));\n\n        favoriteId = (promoInFilms as Map<string, any>).get(`id`);\n    }  \n\n    const isFavorite = useSelector(favoritesSelectors.selectIsFavoriteFactory(favoriteId as number));\n    const status = (isFavorite)\n        ? 0\n        : 1;\n\n    const myListBtnClickHandler = useCallback((): void => {        \n        dispatch(favoritesActions.fetchFavoriteRequest(favoriteId as number, status));\n    }, [dispatch, status, favoriteId]);\n\n    const favoriteError = useSelector(favoritesSelectors.getFavoriteError);\n    const isFavoriteFetching = useSelector(favoritesSelectors.getIsFavoriteFetching);\n\n    return {\n        isFavoriteFetching,\n        favoriteError,\n        myListBtnClickHandler,\n        isFavorite\n    };\n}\n","import React, { FC, memo } from 'react';\nimport styled, { keyframes } from 'styled-components';\n\ntype TNotificationProps = {\n    children: string;\n}\n\nconst fadeInOut = keyframes`\n    0% {\n        opacity: 0;\n    }\n\n    50% {\n        opacity: 1;\n    }\n\n    100% {\n        opacity: 0;\n    }\n`;\n\nconst NotificationWrapper = styled.div`\n    position: fixed;\n    right: 0;\n    bottom: 0;\n    min-height: 50px;\n    width: 300px;\n    outline: 1px solid red;\n    padding: 10px 20px;\n    background-color: black;\n    opacity: 0;\n    animation: ${fadeInOut} linear 5s;\n    text-align: center;\n`;\n\nexport const Notification: FC<TNotificationProps> = memo(({ children }) => (\n    <NotificationWrapper>\n        {children}\n    </NotificationWrapper>\n));\n","import React, { FC, memo, useCallback, useEffect } from 'react';\nimport { push } from 'connected-react-router/immutable';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\nimport { Map } from 'immutable';\n\nimport { useFetchFavorite } from 'hooks/useFetchFavorite';\nimport * as promoSelectors from 'domains/promo/promoSelectors';\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport { isPromo } from 'utils';\nimport { favoritesActions } from 'domains/favorites/favoritesActions';\nimport { Notification } from 'components/notification/Notification';\n\ntype TFilmButtonsProps = {\n    playBtnClickHandler: () => void;\n    detailed?: boolean;\n}\n\nexport const FilmButtons: FC<TFilmButtonsProps> = memo(({playBtnClickHandler, detailed}) => {\n    const {id} = useParams();\n    const dispatch = useDispatch();\n    const promo = useSelector(promoSelectors.getPromo);\n    const user = useSelector(authSelectors.getUser);\n\n    useEffect(() => {\n        dispatch(favoritesActions.resetFavoriteError());\n    }, [dispatch]);\n    \n    const addReviewBtnClickHandler = useCallback(() => {\n        dispatch(push(`${process.env.PUBLIC_URL}/film/${id}/review`));\n    }, [dispatch, id]);\n\n    let favorite: number | Map<string, any>;\n\n    if(!id && isPromo(promo)) {\n        favorite = promo;\n    } else {\n        favorite = +id;\n    }\n\n    const {myListBtnClickHandler, isFavorite, isFavoriteFetching, favoriteError} = useFetchFavorite(favorite);    \n\n    return (\n        <>\n            <button className=\"btn btn--play movie-card__button\" type=\"button\" title=\"Play\"\n                onClick={playBtnClickHandler}\n            >\n                <svg viewBox=\"0 0 19 19\" width=\"19\" height=\"19\">\n                    <use xlinkHref=\"#play\"></use>\n                </svg>\n                <span>Play</span>\n            </button>\n            <button className=\"btn btn--list movie-card__button\" type=\"button\" title=\"My list\"\n                onClick={myListBtnClickHandler}\n            >\n                <svg viewBox=\"0 0 19 20\" width=\"19\" height=\"20\">\n                    <use xlinkHref={(isFavorite && user) ? `#in-list` : `#add`}></use>\n                </svg>\n                <span>My list</span>\n            </button>\n            {(detailed) &&\n                <a className=\"btn btn--add-review movie-card__button\" title=\"Add review\"\n                    onClick={addReviewBtnClickHandler}\n                >\n                    Add review\n                </a> \n            }\n            {(isFavoriteFetching) &&\n                <Notification>\n                    Saving to the favorites list... Please, wait.\n                </Notification>\n            }\n            {(favoriteError) &&\n                <Notification>\n                    {(favoriteError as Error).message}\n                </Notification>\n            }\n        </>\n    );\n});\n","import React, { FC, memo } from 'react';\nimport { Map } from 'immutable';\n\nimport { VideoPlayer } from 'components/videoPlayer/VideoPlayer';\nimport { usePlayingVideo } from 'hooks/usePlayingVideo';\nimport { FilmButtons } from 'components/filmButtons/FilmButtons';\n\ntype TPromoProps = {\n    promo: Map<string, any>;\n}\n\nexport const Promo: FC<TPromoProps> = memo(({ promo }) => {\n    const {isPlaying, handleExitBtnClick, playBtnClickHandler, videoRef, isVideoLoading,\n        onCanPlayThroughHandler} = usePlayingVideo();\n    const name: string = promo.get(`name`);\n\n    return (\n        <div className=\"movie-card__wrap\">\n            <div className=\"movie-card__info\">\n                <div className=\"movie-card__poster\">\n                    <img src={promo.get(`preview_image`)} alt={`${name} poster`} width=\"218\" height=\"327\" />\n                </div>\n                <div className=\"movie-card__desc\">\n                    <h2 className=\"movie-card__title\">{name}</h2>\n                    <p className=\"movie-card__meta\">\n                        <span className=\"movie-card__genre\">{promo.get(`genre`)}</span>\n                        <span className=\"movie-card__year\">{promo.get(`released`)}</span>\n                    </p>\n                    <div className=\"movie-card__buttons\">\n                        {<FilmButtons playBtnClickHandler={playBtnClickHandler} />}\n                    </div>\n                </div>\n                <VideoPlayer src={promo.get(`video_link`)} posterImage={promo.get(`poster_image`)}\n                    runTime={promo.get(`run_time`)} ref={videoRef} isPlaying={isPlaying}\n                    handleExitBtnClick={handleExitBtnClick} isVideoLoading={isVideoLoading}\n                    onCanPlayThroughHandler={onCanPlayThroughHandler}\n                />\n            </div>\n        </div>\n    );\n});\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\n\ntype TMessageProps = {\n    children: string;\n}\n\nconst MessageWrapper = styled.div`\n    min-height: 330px;\n    padding-top: 180px;\n    padding-left: 50px;\n    padding-right: 50px;\n    text-align: center;\n    font-size: 32px;\n    width: 1140px;\n    margin: 0 auto;\n    line-height: 40px;\n`;\n\nexport const Message: FC<TMessageProps> = ({children}) => {\n    return (\n        <MessageWrapper>\n            { children }\n        </MessageWrapper>\n    );\n}\n","import React, { FC } from 'react';\nimport { Map } from 'immutable';\n\nimport { Promo } from 'components/promo/Promo';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { useFetchPromo } from 'hooks/useFetchPromo';\nimport { Message } from 'components/message/Message';\n\nexport const PromoContainer: FC = () => {\n    const {isPromoFetching, promoError, promo} = useFetchPromo();\n    const verifiedPromo = promo as Map<string, any>;\n\n    if(isPromoFetching) {\n        return <Spinner />;\n    }\n\n    if(promoError) {\n        return (\n            <Message>\n                {(promoError as Error).message}\n            </Message>\n        );\n    }\n\n    return <Promo promo={verifiedPromo} />;\n}\n","import { useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport * as promoSelectors from 'domains/promo/promoSelectors';\nimport { promoActions } from 'domains/promo/promoActions';\n\nexport const useFetchPromo = () => {\n    const dispatch = useDispatch();\n    const promo = useSelector(promoSelectors.getPromo);\n\n    useEffect(() => {\n        dispatch(promoActions.fetchPromoRequest());\n    }, [dispatch]);\n\n    const isPromoFetching = useSelector(promoSelectors.getIsPromoFetching);\n    const promoError = useSelector(promoSelectors.getPromoError);\n\n    return {\n        isPromoFetching,\n        promoError,\n        promo\n    };\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { filmsActions } from 'domains/films/filmsActions';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\n\nexport const useFetchFilms = () => {\n    const dispatch = useDispatch();\n    const films = useSelector(filmsSelectors.getFilms);\n\n    useEffect(() => {\n        dispatch(filmsActions.fetchFilmsRequest());\n    }, [dispatch]);\n\n    const filmsError = useSelector(filmsSelectors.getFilmsError);\n    const isFilmsFetching = useSelector(filmsSelectors.getIsFilmsFetching);\n\n    return {\n        isFilmsFetching,\n        filmsError,\n        films\n    };\n}\n","import React, { FC, memo } from 'react';\nimport { Map } from 'immutable';\n\nimport { useFilmsPagePush } from 'hooks/useFilmsPagePush';\n\ntype TFilmProps = {\n    film: Map<string, any>;\n}\n\nexport const Film: FC<TFilmProps> = memo(({ film }) => {\n    const name: string = film.get(`name`);\n    const id: number = film.get(`id`);\n\n    const filmDivClickHandler = useFilmsPagePush(id);\n\n    return (\n        <article className=\"small-movie-card catalog__movies-card\" title={name}>\n            <div className=\"small-movie-card__image\" onClick={filmDivClickHandler}>\n                <img src={film.get(`preview_image`)} alt={name} width=\"280\" height=\"175\" />\n            </div>\n            <h3 className=\"small-movie-card__title\">\n                <a className=\"small-movie-card__link\">\n                    {name}\n                </a>\n            </h3>\n        </article>\n    );\n});\n","import React, { FC, memo } from 'react';\nimport { List, Map } from 'immutable';\n\nimport { Film } from 'components/film/Film';\n\ntype TFilmsListProps = {\n    films: List<Map<string, any>> | undefined;\n}\n\nexport const FilmsList: FC<TFilmsListProps> = memo(({ films }) => {\n    const filmsJSX: List<JSX.Element> =\n        (films as List<Map<string, any>>).map((film) => <Film key={film.get(`id`)} film={film} />);\n\n    return (\n        <div className=\"catalog__movies-list\">\n            {filmsJSX}\n        </div>\n    );\n});\n","import React, { FC, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { List, Map } from 'immutable';\n\nimport { useFetchFilms } from 'hooks/useFetchFilms';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { FilmsList } from 'components/filmsList/FilmsList';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\nimport { useFilmsListBatch } from 'hooks/useFilmsListBatch';\nimport { isFilms } from 'utils';\nimport { Message } from 'components/message/Message';\n\nexport const FilmsListContainer: FC = () => {\n    const {isFilmsFetching, filmsError, films} = useFetchFilms();\n    const {batch, requestNextBatch} = useFilmsListBatch();\n\n    const filteredFilms = useSelector(filmsSelectors.selectFilmsByGenre);\n    const showMoreBtnClickHandler = useCallback(requestNextBatch, []);\n    let batchedFilms;\n    let hasMoreFilms;\n\n    if(isFilms(films)) {\n        batchedFilms = (filteredFilms as List<Map<string, any>>).slice(0, batch);\n        hasMoreFilms = batchedFilms.size < (filteredFilms as List<Map<string, any>>).size;\n    }\n\n    if(isFilmsFetching) {\n        return <Spinner />;\n    }\n\n    if(filmsError) {\n        return (\n            <Message>\n                {(filmsError as Error).message}\n            </Message>\n        );\n    }\n\n    return (\n        <>\n            {(isFilms(films)) &&\n                <>\n                    <FilmsList films={batchedFilms} />\n                    <div className=\"catalog__more\">\n                        {(hasMoreFilms) &&\n                            <button className=\"catalog__button\" type=\"button\" onClick={showMoreBtnClickHandler}\n                                title=\"Show more\"\n                            >\n                                Show more\n                            </button>\n                        }\n                    </div>\n                </>\n            }\n            {!(isFilms(films)) &&\n                <Message>\n                    We are sorry. There aren't available films now.\n                </Message>\n            }\n        </>\n    );\n}\n","import { useState } from 'react';\n\nexport const useFilmsListBatch = () => {\n    const [batch, setBatch] = useState(20);\n\n    const requestNextBatch = () => setBatch((batch) => batch + 20);\n\n    return {\n        batch,\n        requestNextBatch\n    };\n};\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport cn from 'classnames';\nimport { Set } from 'immutable'\n\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\nimport { isGenres } from 'utils';\nimport { useGenreFilter } from 'hooks/useGenreFilter';\n\nexport const GenreFilter: FC = () => {\n    const genres = useSelector(filmsSelectors.selectGenres);\n    const filmsError = useSelector(filmsSelectors.getFilmsError);\n    const isFilmsFetching = useSelector(filmsSelectors.getIsFilmsFetching);\n\n    const {filter, genreItemClickHander} = useGenreFilter();\n\n    if(filmsError || isFilmsFetching) {\n        return null;\n    }\n\n    let genresJSX: undefined | Set<JSX.Element>;\n    \n    if(isGenres(genres)) {\n        genresJSX = genres.map((genre) => {\n            const isCurrentGenre = genre === filter;\n            const genreClass = cn(`catalog__genres-item`, {\n                'catalog__genres-item--active': isCurrentGenre\n            });\n\n            const genreLinkStyle = (isCurrentGenre)\n                ? {cursor: `default`}\n                : {};\n\n            return (\n                <li className={genreClass} key={ genre }>\n                    <a className=\"catalog__genres-link\" onClick={() => genreItemClickHander(genre)} title={(isCurrentGenre) ? `` : genre}\n                        style={genreLinkStyle}\n                    >\n                        { genre }\n                    </a>\n                </li>\n            );\n        });\n    }\n\n    return (\n        <ul className=\"catalog__genres-list\">\n            { genresJSX }\n        </ul>\n    );\n};\n","import { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { filmsActions } from 'domains/films/filmsActions';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\n\nexport const useGenreFilter = () => {\n    const filter = useSelector(filmsSelectors.getFilter);\n    const dispatch = useDispatch();\n\n    const genreItemClickHander = useCallback((genre: string): void => {\n        if(genre !== filter) {\n            dispatch(filmsActions.setFilter(genre));\n        }        \n    }, [dispatch, filter]);\n\n    return {\n        filter,\n        genreItemClickHander\n    };\n}\n","import React, { FC } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nimport { useLogoLinkClick } from 'hooks/useLogoLinkClick';\nimport { Routes } from 'mainConstants';\nimport { Logo } from 'components/logo/Logo';\n\nexport const Footer: FC = () => {\n    const logoLinkClickHandler = useLogoLinkClick();\n    const {pathname} = useLocation();\n    const isMainPage = pathname === `${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`;\n\n    return (\n        <footer className=\"page-footer\">\n            <Logo isMainPage={isMainPage} logoLinkClickHandler={logoLinkClickHandler} isFooter />\n            <div className=\"copyright\">\n                <p>© 2020 What to watch Ltd.</p>\n            </div>\n        </footer>\n    );\n}\n","import React, { FC } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nimport { Header } from 'components/header/Header';\nimport { PromoContainer } from 'components/promoContainer/PromoContainer';\nimport { FilmsListContainer } from 'components/filmsListContainer/FilmsListContainer';\nimport { GenreFilter } from 'components/genreFilter/GenreFilter';\nimport { Footer } from 'components/footer/Footer';\nimport * as promoSelectors from 'domains/promo/promoSelectors';\n\nexport const MainPage: FC = () => {\n    const promo = useSelector(promoSelectors.getPromo);\n    let divStyle = {};    \n\n    if(promo) {\n        const backgroundColor: string = (promo as Map<string, any>).get(`background_color`);\n\n        divStyle = {\n            backgroundImage: `linear-gradient(-180deg, ${backgroundColor} 0%, ${backgroundColor} 100%)`\n        }\n    }\n\n    return (\n        <>\n            <section className=\"movie-card\">\n                <Header />\n                <PromoContainer />\n            </section>\n            <div className=\"page-content\" style={ divStyle }>\n                <section className=\"catalog\">\n                    <h2 className=\"catalog__title visually-hidden\">Catalog</h2>\n                    <GenreFilter />\n                    <FilmsListContainer />\n                </section>\n                <Footer />\n            </div>\n        </>\n    );\n};\n","import { object, string } from 'yup';\n\nexport const loginFormShape = {\n    initialValues: {\n        email: ``,\n        password: ``\n    },\n    schema: object().shape({\n        email: string()\n            .min(6, `Email should be more than 6 characters`)\n            .required(`Email is required field`)\n            .email(`Invalid email`)        \n            .trim(),\n        password: string()\n            .min(6, `Password should be more than 6 characters`)\n            .max(15, `Password should be less than 15 characters`)\n            .required(`Password is required field`)\n            .trim()\n    })\n}\n\nexport const reviewFormShape = {\n    initialValues: {\n        'rating': ``,\n        'review-text': ``\n    },\n    schema: object().shape({\n        'rating': string()\n            .required(`Rating is required`),\n        'review-text': string()\n            .min(50, `Review should be more than 50 characters`)\n            .max(400, `Review should be less than 400 characters`)\n            .required(`Review is required field`)\n            .trim()\n    })\n}\n","import React, { FC, memo } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport { loginFormShape } from 'formShapes';\nimport { TUserData } from 'types';\n\ntype TLoginFormProps = {\n    loginFormSubmitHandler: (userData: TUserData) => void;\n}\n\nexport const LoginForm: FC<TLoginFormProps> = memo(({loginFormSubmitHandler}) => (\n    <Formik initialValues={loginFormShape.initialValues} onSubmit={loginFormSubmitHandler}\n        validationSchema={loginFormShape.schema}\n    >\n        {({ isValid }) => (\n            <Form className=\"sign-in__form\">\n                <ErrorMessage name=\"email\">\n                    {(message) => (\n                        <div className=\"sign-in__message\">\n                            <p>{message}</p>\n                        </div>\n                    )}                   \n                </ErrorMessage>\n                <ErrorMessage name=\"password\">\n                    {(message) => (\n                        <div className=\"sign-in__message\">\n                            <p>{message}</p>\n                        </div>\n                    )}\n                </ErrorMessage>\n                <div className=\"sign-in__fields\">\n                    <div className=\"sign-in__field\">\n                        <Field className=\"sign-in__input\" type=\"email\" placeholder=\"Email address\" name=\"email\"\n                            id=\"user-email\"\n                        />\n                        <label className=\"sign-in__label visually-hidden\" htmlFor=\"user-email\">\n                            Email address\n                        </label>\n                    </div>\n                    <div className=\"sign-in__field\">\n                        <Field className=\"sign-in__input\" type=\"password\" placeholder=\"Password\" name=\"password\"\n                            id=\"user-password\"\n                        />\n                        <label className=\"sign-in__label visually-hidden\" htmlFor=\"user-password\">\n                            Password\n                        </label>\n                    </div>\n                </div>\n                <div className=\"sign-in__submit\">\n                    <button className=\"sign-in__btn\" type=\"submit\" title=\"Sign in\" disabled={!isValid}>\n                        Sign in\n                    </button>\n                </div>\n            </Form>\n        )}\n    </Formik>\n));\n","import React, { FC } from 'react';\n\nimport { Spinner } from 'components/spinner/Spinner';\nimport { useFetchAuth } from 'hooks/useFetchAuth';\nimport { LoginForm } from 'components/loginForm/LoginForm';\n\nexport const LoginFormContainer: FC = () => {\n    const {isAuthFetching, loginFormSubmitHandler} = useFetchAuth();\n\n    if(isAuthFetching) {\n        return <Spinner />;\n    }\n\n    return (\n        <div className=\"sign-in user-page__content\">\n            <LoginForm loginFormSubmitHandler={loginFormSubmitHandler} />\n        </div> \n    );\n}\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { authActions } from 'domains/auth/authActions';\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport { TUserData } from 'types';\n\nexport const useFetchAuth = () => {\n    const dispatch = useDispatch();\n\n    const loginFormSubmitHandler = useCallback((userData: TUserData): void => {\n        const {email, password} = userData;\n\n        dispatch(authActions.fetchAuthRequest({\n            email,\n            password\n        }));\n    }, [dispatch]);\n\n    const user = useSelector(authSelectors.getUser);\n    const authError = useSelector(authSelectors.getAuthError);\n    const isAuthFetching = useSelector(authSelectors.getIsAuthFetching);\n\n    return {\n        isAuthFetching,\n        authError,\n        user,\n        loginFormSubmitHandler\n    };\n}\n","import React, { FC, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { Header } from 'components/header/Header';\nimport { Footer } from 'components/footer/Footer';\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport { Routes } from 'mainConstants';\nimport { LoginFormContainer } from 'components/loginFormContainer/LoginFormContainer';\nimport { Message } from 'components/message/Message';\nimport { authActions } from 'domains/auth/authActions';\n\nexport const LoginPage: FC = () => {\n    const user = useSelector(authSelectors.getUser);\n    const authError = useSelector(authSelectors.getAuthError);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(authActions.resetAuthError());\n    }, [dispatch]);\n\n    if(user) {\n        return <Redirect to={`${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`} />;\n    }\n\n    return (\n        <div className=\"user-page\">\n            <Header />\n            {(authError) &&\n                <Message>\n                    {(authError as Error).message}\n                </Message>\n            }\n            {(!authError) &&\n                <LoginFormContainer />\n            }\n            <Footer />\n        </div>\n    );\n}\n","import React, { FC, memo } from 'react';\nimport { Map, List } from 'immutable';\n\nimport { mapRatingToMark } from 'utils';\n\ntype TOverviewTabProps = {\n    rating: string;\n    scoresCount: number;\n    description: string;\n    director: string;\n    starring: List<Map<string, any>>;\n}\n\nexport const OverviewTab: FC<TOverviewTabProps> = memo(({rating, scoresCount, description, director, starring}) => {\n    return (\n        <>\n            <div className=\"movie-rating\">\n                <div className=\"movie-rating__score\">{rating}</div>\n                <p className=\"movie-rating__meta\">\n                    <span className=\"movie-rating__level\">{mapRatingToMark(+rating)}</span>\n                    <span className=\"movie-rating__count\">{`${scoresCount} ratings`}</span>\n                </p>\n            </div>\n            <div className=\"movie-card__text\">\n                <p>{description}</p>\n                <p className=\"movie-card__director\">\n                    <strong>{`Director: ${director}`}</strong>\n                </p>\n                <p className=\"movie-card__starring\">\n                    <strong>{`Starring: ${starring.join(`, `)}`}</strong>\n                </p>\n            </div>\n        </>\n    );\n});\n","import React, { FC, memo } from 'react';\nimport { Map, List } from 'immutable';\n\nimport { getTimeFromMins } from 'utils';\n\ntype TDetailsTabProps = {\n    released: number;\n    runTime: number;\n    genre: string;\n    director: string;\n    starring: List<Map<string, any>>;\n}\n\nexport const DetailsTab: FC<TDetailsTabProps> = memo(({ released, runTime, genre, director, starring }) => {\n    return (\n        <div className=\"movie-card__text movie-card__row\">\n            <div className=\"movie-card__text-col\">\n                <p className=\"movie-card__details-item\">\n                    <strong className=\"movie-card__details-name\">Director</strong>\n                    <span className=\"movie-card__details-value\">{ director }</span>\n                </p>\n                <p className=\"movie-card__details-item\">\n                    <strong className=\"movie-card__details-name\">Starring</strong>\n                    <span className=\"movie-card__details-value\">\n                        { starring.join(`,\\n`) }\n                    </span>\n                </p>\n            </div>\n            <div className=\"movie-card__text-col\">\n                <p className=\"movie-card__details-item\">\n                    <strong className=\"movie-card__details-name\">Run Time</strong>\n                    <span className=\"movie-card__details-value\">{getTimeFromMins(runTime)}</span>\n                </p>\n                <p className=\"movie-card__details-item\">\n                    <strong className=\"movie-card__details-name\">Genre</strong>\n                    <span className=\"movie-card__details-value\">{ genre }</span>\n                </p>\n                <p className=\"movie-card__details-item\">\n                    <strong className=\"movie-card__details-name\">Released</strong>\n                    <span className=\"movie-card__details-value\">{ released }</span>\n                </p>\n            </div>\n        </div>\n    );\n});\n","import { TState } from 'types';\n\nexport const getIsReviewsFetching = (state: TState) => state.reviews.get(`isReviewsFetching`);\n\nexport const getReviewsError = (state: TState) => state.reviews.get(`reviewsError`);\n\nexport const getReviews = (state: TState) => state.reviews.getIn([`reviews`, `data`]);\n\nexport const getReviewsId = (state: TState) => state.reviews.getIn([`reviews`, `id`]);\n\nexport const getIsReviewFetching = (state: TState) => state.reviews.get(`isReviewFetching`);\n\nexport const getReviewError = (state: TState) => state.reviews.get(`reviewError`);\n","import React, { FC, memo } from 'react';\nimport { Map } from 'immutable';    \n\nimport { mapMonthToNubmer } from 'utils';\n\ntype TReviewProps = {\n    review: Map<string, any>;\n}\n\nexport const Review: FC<TReviewProps> = memo(({ review }) => {\n    const date = new Date(Date.parse(review.get(`date`)));\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n\n    return (\n        <div className=\"review\">\n            <blockquote className=\"review__quote\">\n                <p className=\"review__text\">\n                    {review.get(`comment`)}\n                </p>\n                <footer className=\"review__details\">\n                    <cite className=\"review__author\">\n                        {review.getIn([`user`, `name`])}\n                    </cite>\n                    <time className=\"review__date\" dateTime={`${year}-${month + 1}-${day}`}>\n                        {`${mapMonthToNubmer(month)} ${day}, ${year}`}\n                    </time>\n                </footer>\n            </blockquote>\n            <div className=\"review__rating\">\n                {review.get(`rating`)}\n            </div>\n        </div>\n    );\n});\n","import React, { FC, memo } from 'react';\nimport { List } from 'immutable';\n\nimport { useFetchReviews } from 'hooks/useFetchReviews';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { isReviews }  from 'utils';\nimport { Review } from 'components/review/Review';\nimport { Message } from 'components/message/Message';\n\ntype TReviewsTabProps = {\n    id: number;\n}\n\nexport const ReviewsTab: FC<TReviewsTabProps> = memo(({ id }) => {\n    const {isReviewsFetching, reviewsError, reviews} = useFetchReviews(id);\n\n    if(isReviewsFetching) {\n        return <Spinner />;\n    }\n\n    if(reviewsError) {\n        return (\n            <Message>\n                {(reviewsError as Error).message}\n            </Message>\n        );\n    }\n\n    let reviewsJSX: List<JSX.Element> | undefined;\n    let leftColReviewsJSX: List<JSX.Element> | undefined;\n    let rightColReviewsJSX: List<JSX.Element> | undefined;\n\n    if(isReviews(reviews)) {\n        reviewsJSX = reviews.sort((a, b) => Date.parse(b.get(`date`)) - Date.parse(a.get(`date`)))\n                            .map((review) => <Review review={review} key={review.get(`id`)} />);\n\n        leftColReviewsJSX = reviewsJSX.filter((_, ind) => !(ind % 2));\n        rightColReviewsJSX = reviewsJSX.filter((_, ind) => ind % 2);\n    }\n    \n    return (\n        <div className = \"movie-card__reviews movie-card__row\">\n            {(reviewsJSX) &&\n                <>\n                    <div className=\"movie-card__reviews-col\">\n                        {leftColReviewsJSX}\n                    </div>\n                    <div className=\"movie-card__reviews-col\">\n                        {rightColReviewsJSX}\n                    </div>\n                </>\n            }\n            {(!reviewsJSX) && \n                <Message>\n                    No reviews yet. Your will be the first!\n                </Message>\n            }\n        </div>\n    );\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector} from 'react-redux';\n\nimport { reviewsActions } from 'domains/reviews/reviewsActions';\nimport * as reviewsSelectors from 'domains/reviews/reviewsSelectors';\n\nexport const useFetchReviews = (id: number) => {\n    const dispatch = useDispatch();\n    const reviews = useSelector(reviewsSelectors.getReviews);\n    const reviewsId = useSelector(reviewsSelectors.getReviewsId);\n\n    useEffect(() => {\n        if(reviewsId !== id) {\n            dispatch(reviewsActions.fetchReviewsRequest(id));\n        }\n    }, [dispatch, id, reviewsId, reviews]);\n\n    const reviewsError = useSelector(reviewsSelectors.getReviewsError);\n    const isReviewsFetching = useSelector(reviewsSelectors.getIsReviewsFetching);\n\n    return {\n        isReviewsFetching,\n        reviewsError,\n        reviews\n    };\n}\n","import React, { FC, memo, useEffect, useState, useCallback } from 'react';\nimport { Map, List } from 'immutable';\nimport cn from 'classnames';\n\nimport { Header } from 'components/header/Header';\nimport { OverviewTab } from 'components/overviewTab/OverviewTab';\nimport { DetailsTab } from 'components/detailsTab/DetailsTab';\nimport { ReviewsTab } from 'components/reviewsTab/ReviewsTab';\nimport { usePlayingVideo } from 'hooks/usePlayingVideo';\nimport { FilmButtons } from 'components/filmButtons/FilmButtons';\nimport { VideoPlayer } from 'components/videoPlayer/VideoPlayer';\nimport { useSetFilm } from 'hooks/useSetFilm';\n\ntype TDetailedFilmProps = {\n    film: Map<string, any>;\n}\n\nexport const DetailedFilm: FC<TDetailedFilmProps> = memo(({ film }) => {\n    const [currentTab, setCurrentTab] = useState(`Overview`);\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [film]);\n\n    useEffect(() => {\n        return function clean() {\n            setCurrentTab(`Overview`);\n        }\n    }, [film]);\n\n    useSetFilm(film);\n\n    const {isPlaying, handleExitBtnClick, playBtnClickHandler, videoRef, isVideoLoading,\n        onCanPlayThroughHandler} = usePlayingVideo();\n\n    const navLinkClickHandler = useCallback((tab: string): void => {\n        setCurrentTab(tab);\n    }, []);\n\n    const posterImage: string = film.get(`poster_image`);\n    const name: string = film.get(`name`);\n    const genre: string = film.get(`genre`);\n    const released: number = film.get(`released`);\n    const runTime: number = film.get(`run_time`);\n    const director: string = film.get(`director`);\n    const starring: List<Map<string, any>> = film.get(`starring`);\n\n    const tabs: string[] = [`Overview`, `Details`, `Reviews`];\n    const navLinksJSX: JSX.Element[] = tabs.map((tab) => {\n        const isCurrentTab = tab === currentTab;\n        const navItemClass = cn(`movie-nav__item`, {\n            'movie-nav__item--active': isCurrentTab\n        });\n\n        const navLinkStyle = (isCurrentTab)\n            ? {cursor: `default`}\n            : {};\n\n        return (\n            <li className={navItemClass} key={ tab }>\n                <a className=\"movie-nav__link\" onClick={() => navLinkClickHandler(tab)}\n                    title={(isCurrentTab) ? `` : tab} style={navLinkStyle}\n                >\n                    { tab }\n                </a>\n            </li>\n        );\n    });\n    \n    return (\n        <>\n            <div className=\"movie-card__hero\">\n                <Header film={film} />\n                <div className=\"movie-card__wrap\">\n                    <div className=\"movie-card__desc\">\n                        <h2 className=\"movie-card__title\">{name}</h2>\n                        <p className=\"movie-card__meta\">\n                            <span className=\"movie-card__genre\">{genre}</span>\n                            <span className=\"movie-card__year\">{released}</span>\n                        </p>\n                        <div className=\"movie-card__buttons\">\n                            {<FilmButtons playBtnClickHandler={playBtnClickHandler} detailed />}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"movie-card__wrap movie-card__translate-top\">\n                <div className=\"movie-card__info\">\n                    <div className=\"movie-card__poster movie-card__poster--big\">\n                        <img src={posterImage} alt={`${name} poster`} width=\"218\" height=\"327\" />\n                    </div>\n                    <div className=\"movie-card__desc\">\n                        <nav className=\"movie-nav movie-card__nav\">\n                            <ul className=\"movie-nav__list\">\n                                {navLinksJSX}\n                            </ul>\n                        </nav>\n                        {(currentTab === `Overview`) &&\n                            <OverviewTab rating={film.get(`rating`).toFixed(1)} scoresCount={film.get(`scores_count`)}\n                                description={film.get(`description`)} director={director} starring={starring}\n                            />\n                        }\n                        {(currentTab === `Details`) &&\n                            <DetailsTab genre={genre} released={released} runTime={runTime}\n                                director={director} starring={starring}\n                            />\n                        }\n                        {(currentTab === `Reviews`) && <ReviewsTab id={film.get(`id`)} />}                  \n                    </div>\n                    <VideoPlayer src={film.get(`video_link`)} posterImage={posterImage} runTime={runTime} ref={videoRef}\n                        handleExitBtnClick={handleExitBtnClick} onCanPlayThroughHandler={onCanPlayThroughHandler}\n                        isVideoLoading={isVideoLoading} isPlaying={isPlaying}\n                    />\n                </div>\n            </div>\n        </>\n    );\n});\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Map } from 'immutable';\n\nimport { filmsActions } from 'domains/films/filmsActions';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\n\nexport const useSetFilm = (film: Map<string, any>) => {\n    const dispatch = useDispatch();\n    const currentFilm = useSelector(filmsSelectors.getFilm);\n\n    useEffect(() => {\n        if(!currentFilm || (currentFilm as Map<string, any>).get(`id`) !== film.get(`id`)) {\n            dispatch(filmsActions.setFilm(film));\n        }\n    }, [dispatch, film, currentFilm]);\n} \n","import React, { FC, memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Map, List } from 'immutable';\n\nimport { selectSimilarFilmsFactory } from 'domains/films/filmsSelectors';\nimport { Film } from 'components/film/Film';\nimport { isFilms } from 'utils';\n\ntype TSimilarFilmsProps = {\n    film: Map<string, any>;\n}\n\nexport const SimilarFilms: FC<TSimilarFilmsProps> = memo(({ film }) => {\n    const similarFilms = useSelector(selectSimilarFilmsFactory(film));\n    const filmsJSX: List<JSX.Element> =\n        (similarFilms as List<Map<string, any>>).map((film) => <Film key={film.get(`id`)} film={film} />);\n\n    if(!isFilms(similarFilms)) {\n        return null;\n    }\n\n    return (\n        <section className=\"catalog catalog--like-this\">\n            <h2 className=\"catalog__title\">More like this</h2>\n            <div className=\"catalog__movies-list\">\n                {filmsJSX}\n            </div>\n        </section>\n    );\n});\n","import React, { FC } from 'react';\nimport { useParams, Redirect } from 'react-router-dom';\n\nimport { Header } from 'components/header/Header';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { Routes } from 'mainConstants';\nimport { isFilms } from 'utils';\nimport { Footer } from 'components/footer/Footer';\nimport { useFetchFilms } from 'hooks/useFetchFilms';\nimport { DetailedFilm } from 'components/detailedFilm/DetailedFilm';\nimport { SimilarFilms } from 'components/similarFilms/SimilarFilms';\nimport { Message } from 'components/message/Message';\n\nexport const FilmPage: FC = () => {\n    const {id} = useParams();\n    const {isFilmsFetching, filmsError, films} = useFetchFilms();\n    let film;\n\n    if(isFilmsFetching) {\n        return (\n            <div className=\"movie-card__hero\">\n                <Header />\n                <Spinner />\n            </div>\n        );\n    }\n\n    if(filmsError) {\n        return (\n            <div className=\"movie-card__hero\">\n                <Header />\n                <Message>\n                    {(filmsError as Error).message}\n                </Message>\n            </div>\n        );\n    }\n\n    if(isFilms(films)) {\n        film = films.find((film) => film.get(`id`) === +id);\n    }\n\n    if(!film) {\n        return <Redirect to={`${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`} />;\n    }\n\n    const backgroundColor: string = film.get(`background_color`);\n    const divStyle = {\n        backgroundImage: `linear-gradient(-180deg, ${backgroundColor} 0%, ${backgroundColor} 100%)`\n    }\n    const sectionStyle = {\n        backgroundColor:backgroundColor\n    }\n\n    return (\n        <>\n            <section className=\"movie-card movie-card--full\" style={sectionStyle}>\n                <DetailedFilm film={ film } />\n            </section>\n            <div className=\"page-content\" style={divStyle}>\n                <SimilarFilms film={ film } />\n                <Footer />\n            </div>\n        </>\n    );\n}\n","import React, { FC, ChangeEvent, memo } from 'react';\n\ntype TRadioBtnProps = {\n    value: number;\n    groupValue: string;\n    disabled: boolean;\n    field: {\n        onChange: (e: ChangeEvent<any>) => void;\n        onBlur: () => void;\n    }\n}\n\nexport const RadioBtn: FC<TRadioBtnProps> = memo(({ value, groupValue, disabled, field: {onChange, onBlur}}) => (\n    <>\n        <input className=\"rating__input\" id={`star-${value}`} type=\"radio\" name=\"rating\" value={ value }\n            checked={ value === +groupValue } onChange={onChange} onBlur={onBlur} disabled={ disabled }\n        />\n        <label className=\"rating__label\" htmlFor={`star-${value}`}>\n            {`Rating-${value}`}\n        </label>\n    </>\n));\n","import React, { FC, Children, memo } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport { reviewFormShape } from 'formShapes';\nimport { RadioBtn } from 'components/radioBtn/RadioBtn';\nimport { TUserReview } from 'types';\n\ntype TReviewFormProps = {\n    reviewFormSubmitHandler: (userReview: TUserReview) => void;\n    isReviewFetching: boolean;\n}\n\nexport const ReviewForm: FC<TReviewFormProps> = memo(({ isReviewFetching, reviewFormSubmitHandler }) => {\n    return (\n        <Formik initialValues={reviewFormShape.initialValues} onSubmit={reviewFormSubmitHandler}\n            validationSchema={reviewFormShape.schema}\n        >\n            {({ values, isValid }) => (\n                <Form className=\"add-review__form\">\n                    <ErrorMessage name=\"rating\">\n                        {(message) => <div className=\"review__message\">{message}</div>}\n                    </ErrorMessage>\n                    <ErrorMessage name=\"review-text\">\n                        {(message) => <div className=\"review__message\">{message}</div>}\n                    </ErrorMessage>\n                    <div className=\"rating\">\n                        <div className=\"rating__stars\">\n                            {\n                                Children.toArray(new Array(5).fill(``).map(( _, ind ) => (\n                                    <Field component={RadioBtn} value={5 - ind} groupValue={values.rating}\n                                        disabled={isReviewFetching}\n                                    />\n                                )))\n                            }\n                        </div>\n                    </div>\n                    <div className=\"add-review__text\">\n                        <Field className=\"add-review__textarea\" as=\"textarea\" name=\"review-text\" id=\"review-text\"\n                            placeholder=\"Review text\" disabled={ isReviewFetching }\n                        />\n                        <div className=\"add-review__submit\">\n                            <button className=\"add-review__btn\" type=\"submit\" title=\"Post\"\n                                disabled={ !isValid || isReviewFetching }\n                            >\n                                Post\n                        </button>\n                        </div>\n                    </div>\n                </Form>\n            )}\n        </Formik>\n    );\n});\n","import React, { FC, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useFetchReview } from 'hooks/useFetchReview';\nimport { ReviewForm } from 'components/reviewForm/ReviewForm';\nimport { TUserReview } from 'types';\nimport { Notification } from 'components/notification/Notification';\n\nexport const ReviewFormContainer: FC = () => {\n    const {id} = useParams();\n    const {isReviewFetching, reviewFormSubmitHandler} = useFetchReview();\n    const verifiedIsReviewFetching = (isReviewFetching as boolean);\n\n    const handleReviewFormSubmit = useCallback((userReview: TUserReview) => {\n        reviewFormSubmitHandler(+id, userReview);\n    }, [id, reviewFormSubmitHandler]);\n\n    return (\n        <>\n            <ReviewForm isReviewFetching={verifiedIsReviewFetching} reviewFormSubmitHandler={handleReviewFormSubmit} />\n            {(isReviewFetching) &&\n                <Notification>\n                    Sending your review... Please, wait.\n                </Notification>\n            }\n        </>\n    );\n}\n","import { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { reviewsActions } from 'domains/reviews/reviewsActions';\nimport * as reviewsSelectors from 'domains/reviews/reviewsSelectors';\nimport { TUserReview } from 'types';\n\nexport const useFetchReview = () => {\n    const dispatch = useDispatch();\n\n    const reviewFormSubmitHandler = useCallback((id: number, userReview: TUserReview): void => {    \n        dispatch(reviewsActions.fetchReviewRequest(id, userReview));\n    }, [dispatch]);\n\n    const reviewError = useSelector(reviewsSelectors.getReviewError);\n    const isReviewFetching = useSelector(reviewsSelectors.getIsReviewFetching);\n\n    return {\n        isReviewFetching,\n        reviewError,\n        reviewFormSubmitHandler\n    };\n}\n","import React, { FC, useEffect } from 'react';\nimport { Redirect, useParams } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Map } from 'immutable';\n\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport { Routes } from 'mainConstants';\nimport { Header } from 'components/header/Header';\nimport { Footer } from 'components/footer/Footer';\nimport * as filmsSelectors from 'domains/films/filmsSelectors';\nimport { isFilms } from 'utils';\nimport { ReviewFormContainer } from 'components/reviewFormContainer/ReviewFormContainer';\nimport * as reviewsSelectors from 'domains/reviews/reviewsSelectors';\nimport { Message } from 'components/message/Message';\nimport { reviewsActions } from 'domains/reviews/reviewsActions';\n\nexport const ReviewPage: FC = () => {\n    const user = useSelector(authSelectors.getUser);\n    const films = useSelector(filmsSelectors.getFilms);\n    const reviewError = useSelector(reviewsSelectors.getReviewError);\n\n    const dispatch = useDispatch();\n    const {id} = useParams();\n\n    useEffect(() => {\n        dispatch(reviewsActions.resetReviewError());\n    }, [dispatch]);\n\n    let film;\n    let sectionStyle = {};\n\n    if(isFilms(films)) {\n        film = films.find((film) => film.get(`id`) === +id);\n\n        const backgroundColor: string = (film as Map<string, any>).get(`background_color`);\n\n        sectionStyle = { backgroundColor:backgroundColor };\n    }\n\n    if(!user) {\n        return <Redirect to={`${process.env.PUBLIC_URL}${Routes.LOGIN_PAGE}`} />;\n    }\n\n    return (\n        <section className=\"movie-card movie-card--full\" style={ sectionStyle }>\n            <div className=\"movie-card__header\">\n                <Header film={ film } />\n            </div>\n            {(reviewError) &&\n                <Message>\n                    {(reviewError as Error).message}\n                </Message>\n            }\n            {(!reviewError) &&\n                <div className=\"add-review\">\n                    <ReviewFormContainer />\n                </div>\n            }\n            <Footer />\n        </section>\n    );\n}\n","import React, { FC } from 'react';\nimport { Map, List } from 'immutable';\n\nimport { FilmsList } from 'components/filmsList/FilmsList';\nimport { useFetchFavorites } from 'hooks/useFetchFavorites';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { isFilms } from 'utils';\nimport { Message } from 'components/message/Message';\n\nexport const FavoritesFilmsContainer: FC = () => {\n    const {isFavoritesFetching, favoritesError, favorites} = useFetchFavorites();\n\n    if(isFavoritesFetching) {\n        return <Spinner />;\n    }\n\n    if(favoritesError) {\n        return (\n            <Message>\n                {(favoritesError as Error).message}\n            </Message>\n        );\n    }\n\n    let favoritesList: List<Map<string, any>> | undefined;\n\n    if(isFilms(favorites)) {\n        favoritesList = favorites;\n    } else {\n        return (\n            <Message>\n                Your list of favorite films is empty!\n            </Message>\n        );\n    }\n\n\n    return <FilmsList films={favoritesList} />;\n}\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { favoritesActions } from 'domains/favorites/favoritesActions';\nimport * as favoritesSelectors from 'domains/favorites/favoritesSelectors';\n\nexport const useFetchFavorites = () => {\n    const dispatch = useDispatch();\n    const favorites = useSelector(favoritesSelectors.getFavorites);\n\n    useEffect(() => {\n        dispatch(favoritesActions.fetchFavoritesRequest());\n    }, [dispatch]);\n\n    const favoritesError = useSelector(favoritesSelectors.getFavoritesError);\n    const isFavoritesFetching = useSelector(favoritesSelectors.getIsFavoritesFetching);\n    \n    return {\n        isFavoritesFetching,\n        favoritesError,\n        favorites\n    };\n}\n","import React, { FC } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport * as authSelectors from 'domains/auth/authSelectors';\nimport { Routes } from 'mainConstants';\nimport { Header } from 'components/header/Header';\nimport { Footer } from 'components/footer/Footer';\nimport { FavoritesFilmsContainer } from 'components/favoritesFilmsContainer/FavoritesFilmsContainer';\n\nexport const FavoritesPage: FC = () => {\n    const user = useSelector(authSelectors.getUser);\n\n    if(!user) {\n        return <Redirect to={`${process.env.PUBLIC_URL}${Routes.LOGIN_PAGE}`} />;\n    }\n\n    return (\n        <div className=\"user-page\">\n            <Header />\n            <section className=\"catalog\">\n                <h2 className=\"catalog__title visually-hidden\">Catalog</h2>\n                <FavoritesFilmsContainer />\n            </section>\n            <Footer />\n        </div>\n    );\n}\n","import React, { FC } from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\n\nimport { Routes }  from 'mainConstants';\nimport { MainPage } from 'pages/mainPage/MainPage';\nimport { LoginPage } from 'pages/loginPage/LoginPage';\nimport { FilmPage } from 'pages/filmPage/FilmPage';\nimport { ReviewPage } from 'pages/reviewPage/ReviewPage';\nimport { FavoritesPage } from 'pages/favoritesPage/FavoritesPage';\nimport { useFetchAuthStatus } from 'hooks/useFetchAuthStatus';\n\nexport const App: FC = () => {\n    useFetchAuthStatus();\n\n    return (\n        <Switch>\n            <Route path={`${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`} component={MainPage} exact />\n            <Route path={`${process.env.PUBLIC_URL}${Routes.LOGIN_PAGE}`} component={LoginPage} exact />\n            <Route path={`${process.env.PUBLIC_URL}${Routes.FILM_PAGE}`} component={FilmPage} exact />\n            <Route path={`${process.env.PUBLIC_URL}${Routes.REVIEW_PAGE}`} component={ReviewPage} exact />\n            <Route path={`${process.env.PUBLIC_URL}${Routes.FAVORITES_PAGE}`} component={FavoritesPage} exact />\n            <Redirect to={`${process.env.PUBLIC_URL}${Routes.MAIN_PAGE}`} />\n        </Switch>\n    );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { authActions } from 'domains/auth/authActions';\n\nexport const useFetchAuthStatus = () => {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(authActions.fetchAuthStatusRequest());\n    }, [dispatch]);\n}\n","import React, { ReactNode } from 'react';\nimport { Message } from 'components/message/Message';\n\ntype TErrorBoundaryProps = {\n    children: ReactNode;\n}\n\ntype TErrorBoundaryState = {\n    isError: boolean;\n}\n\nexport class ErrorBoundary extends React.PureComponent<TErrorBoundaryProps, TErrorBoundaryState> {\n    state = {\n        isError: false\n    }\n\n    static getDerivedStateFromError() {\n        return { isError: true};\n    }\n\n    render() {\n        if(this.state.isError) {\n            return (\n                <Message>\n                    We are sorry. Our application isn't available now. Please, reload the page.\n                </Message>\n            );\n        }\n\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter as Router } from 'connected-react-router/immutable';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nimport { history } from 'init/rootReducer';\nimport { persistedStore, store } from 'init/store';\nimport { App } from 'components/app/App';\nimport { Spinner } from 'components/spinner/Spinner';\nimport { ErrorBoundary } from 'components/errorBoundary/ErrorBoundary';\n\nconst renderApp = () => ReactDOM.render(\n    <Provider store={store}>\n        <ErrorBoundary>\n            <Router history={history}>\n                <PersistGate persistor={persistedStore} loading={<Spinner />}>\n                    <App />\n                </PersistGate>\n            </Router>\n        </ErrorBoundary>\n    </Provider>,\n    document.querySelector(`#root`)\n);\n\nif(module.hot && process.env.NODE_ENV !== `production`) {\n    module.hot.accept(`./components/app/App.tsx`, renderApp);\n}\n\nrenderApp();\n"],"sourceRoot":""}